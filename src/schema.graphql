# import * from './generated/prisma.graphql'

directive @isAuthenticated on QUERY | FIELD_DEFINITION | MUTATION
directive @hasRole(roles: [String]) on QUERY | FIELD_DEFINITION | MUTATION
directive @isOwner(type: String) on QUERY | FIELD_DEFINITION | MUTATION
directive @isOwnerOrHasRole(type: String, roles: [String]) on QUERY | MUTATION

input UserConnectionInput {
  where: UserWhereInput
  orderBy: UserOrderByInput
  first: Int
  last: Int
  before: String
  after: String
  skip: Int
}

input SaveCardInput {
  cardNumber: String!
  expiration: String!
  cvv: String!
  firstName: String
  lastName: String
  address: String
  zipcode: String
  invoice: String
}

input SaveAddressInput {
  checkZipcode: Boolean
  addressOne: String!
  addressTwo: String
  city: String!
  state: String!
  zipcode: String!
  telephone: String
}

input SaveVisitInput {
  type: PrescriptionType
  pageIndex: String
  questionnaire: Json!
}

input InterestInput {
  email: String!
  category: String
  note: String
}

input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input CreateMessageInput {
  prescriptionId: String!
  text: String!
  private: Boolean
}

type LoginMessage {
  accessToken: String
  user: User
}

type RegisterMessage {
  message: String!
  accessToken: String
  user: User
}

type PaymentMessage {
  resultCode: String!
  refnum: String
}

type PrepareShipmentMessage {
  resultCode: String!
  batchAmount: Int!
}

type TransactionMessage {
  message: String!
  orderId: String
}

type SuccessMessage {
  message: String
}

type AccountInfo {
  user: User!
  address: Address!
  creditCard: CreditCard!
}

type Mutation {
  login(email: String!, password: String!): RegisterMessage!
  register(input: RegisterInput!): RegisterMessage!
  requestReset(email: String!): SuccessMessage!
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): SuccessMessage!
  logout: Boolean!
  newMessage(input: CreateMessageInput!): SuccessMessage!
  revokeRefreshTokensForUser(userId: String!): Boolean!
  updateCurrVisit(input: Json): SuccessMessage!
  saveCard(input: SaveCardInput!): CreditCard!
  saveAddress(input: SaveAddressInput!): SuccessMessage!
  saveNewVisit(input: Json!): SuccessMessage!
  saveNewSupplement(input: Json!): SuccessMessage!
  updateVisit(id: String!, status: String): SuccessMessage!
  denyPrescription(id: String!): SuccessMessage!
  approvePrescription(id: String!): SuccessMessage!
  updatePrescription(id: String!, status: String): SuccessMessage!
  addInterest(input: InterestInput): SuccessMessage!
  resetShippoIds: SuccessMessage!
  processOrders(idList: [String]!): SuccessMessage!
  shipOrders(idList: [String]!): SuccessMessage!
  prepareShipment(idList: [String]!): PrepareShipmentMessage!
  makePayment(amount: Int!, token: String!): PaymentMessage!
  validateUserAddress: SuccessMessage!
  validateAddresses: SuccessMessage!
  testLiveConnection: SuccessMessage!
  sendMessage(message: String!, phoneNumber: String!): SuccessMessage!
  updateEmail(newEmail: String!, password: String!): SuccessMessage!
  updatePassword(
    currentPassword: String!
    newPassword: String!
  ): SuccessMessage!
  processPlans: SuccessMessage!
  setNextDeliveryDate: SuccessMessage!
  sendReminders: Int!
  updateNextDeliveryDate(id: String!, updateType: Int!): SuccessMessage!
  processRefills: Int!
}

type Query {
  me: User
  admin: User
  user(id: String!): User
  users: [User]!
  creditCards: [CreditCard]!
  getUserCreditCard: CreditCard
  userExists(email: String!): Boolean!
  hello: SuccessMessage
  prescription(id: String!): Prescription
  pendingPrescriptions: [Prescription]!
  physicianListPrescriptions: [Prescription]!
  prescriptions(
    pageSize: Int
    after: String
    status: String
  ): PrescriptionConnection!
  messages: [Message]!
  getMessagesByPrescription(prescriptionId: String!): [Message]!
  getPatientMessages: [Message]!
  getProduct(id: String!): Product
  order(id: String!): Order
  orderHistoryById(email: String!): [Order]!
  orders(status: String): [Order]!
  validZipCode(zipcode: String!): Boolean!
  visit(id: String!): Visit
  visitsCount: Int!
  visits(pageSize: Int, after: String, status: String): VisitConnection!
  usersConnection(input: UserConnectionInput): UserConnection!
  getRecentPrescriptionMessage(prescriptionId: String!): Message
  getPatientPrescriptions(userId: String): [Prescription]!
  getTreatments: [Prescription]!
  getPatientChat(prescriptionId: String!): [Message]!
  getDiscount(code: String!): Discount
  getShippoOrder(orderId: String!): Json
  getAccountInfo: AccountInfo!
  remindersToGo: [Prescription]!
  refillsToProcess: [Prescription]!
  abandonCarts(daysBack: Int!): [User]!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  tokenVersion: Int
  role: Role
  gender: String
  birthDate: DateTime
  photoId: String
  addresses: [Address]!
  creditCards: [CreditCard]!
  prescriptions: [Prescription]!
  currVisit: Json
  resetToken: String
  resetTokenExpiry: Float
}
