module.exports = {
  // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  typeDefs:
    // Please don't change this file manually but run `prisma generate` to update it.
    // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

    /* GraphQL */ `
      type Address {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        user: User!
        active: Boolean!
        addressOne: String!
        addressTwo: String
        city: String!
        state: String!
        zipcode: String!
        telephone: String!
        email: String
        shippoId: String
      }

      type AddressConnection {
        pageInfo: PageInfo!
        edges: [AddressEdge]!
        aggregate: AggregateAddress!
      }

      input AddressCreateInput {
        id: ID
        user: UserCreateOneWithoutAddressesInput!
        active: Boolean
        addressOne: String!
        addressTwo: String
        city: String!
        state: String!
        zipcode: String!
        telephone: String!
        email: String
        shippoId: String
      }

      input AddressCreateManyWithoutUserInput {
        create: [AddressCreateWithoutUserInput!]
        connect: [AddressWhereUniqueInput!]
      }

      input AddressCreateWithoutUserInput {
        id: ID
        active: Boolean
        addressOne: String!
        addressTwo: String
        city: String!
        state: String!
        zipcode: String!
        telephone: String!
        email: String
        shippoId: String
      }

      type AddressEdge {
        node: Address!
        cursor: String!
      }

      enum AddressOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        active_ASC
        active_DESC
        addressOne_ASC
        addressOne_DESC
        addressTwo_ASC
        addressTwo_DESC
        city_ASC
        city_DESC
        state_ASC
        state_DESC
        zipcode_ASC
        zipcode_DESC
        telephone_ASC
        telephone_DESC
        email_ASC
        email_DESC
        shippoId_ASC
        shippoId_DESC
      }

      type AddressPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        active: Boolean!
        addressOne: String!
        addressTwo: String
        city: String!
        state: String!
        zipcode: String!
        telephone: String!
        email: String
        shippoId: String
      }

      input AddressScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        active: Boolean
        active_not: Boolean
        addressOne: String
        addressOne_not: String
        addressOne_in: [String!]
        addressOne_not_in: [String!]
        addressOne_lt: String
        addressOne_lte: String
        addressOne_gt: String
        addressOne_gte: String
        addressOne_contains: String
        addressOne_not_contains: String
        addressOne_starts_with: String
        addressOne_not_starts_with: String
        addressOne_ends_with: String
        addressOne_not_ends_with: String
        addressTwo: String
        addressTwo_not: String
        addressTwo_in: [String!]
        addressTwo_not_in: [String!]
        addressTwo_lt: String
        addressTwo_lte: String
        addressTwo_gt: String
        addressTwo_gte: String
        addressTwo_contains: String
        addressTwo_not_contains: String
        addressTwo_starts_with: String
        addressTwo_not_starts_with: String
        addressTwo_ends_with: String
        addressTwo_not_ends_with: String
        city: String
        city_not: String
        city_in: [String!]
        city_not_in: [String!]
        city_lt: String
        city_lte: String
        city_gt: String
        city_gte: String
        city_contains: String
        city_not_contains: String
        city_starts_with: String
        city_not_starts_with: String
        city_ends_with: String
        city_not_ends_with: String
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        zipcode: String
        zipcode_not: String
        zipcode_in: [String!]
        zipcode_not_in: [String!]
        zipcode_lt: String
        zipcode_lte: String
        zipcode_gt: String
        zipcode_gte: String
        zipcode_contains: String
        zipcode_not_contains: String
        zipcode_starts_with: String
        zipcode_not_starts_with: String
        zipcode_ends_with: String
        zipcode_not_ends_with: String
        telephone: String
        telephone_not: String
        telephone_in: [String!]
        telephone_not_in: [String!]
        telephone_lt: String
        telephone_lte: String
        telephone_gt: String
        telephone_gte: String
        telephone_contains: String
        telephone_not_contains: String
        telephone_starts_with: String
        telephone_not_starts_with: String
        telephone_ends_with: String
        telephone_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        shippoId: String
        shippoId_not: String
        shippoId_in: [String!]
        shippoId_not_in: [String!]
        shippoId_lt: String
        shippoId_lte: String
        shippoId_gt: String
        shippoId_gte: String
        shippoId_contains: String
        shippoId_not_contains: String
        shippoId_starts_with: String
        shippoId_not_starts_with: String
        shippoId_ends_with: String
        shippoId_not_ends_with: String
        AND: [AddressScalarWhereInput!]
        OR: [AddressScalarWhereInput!]
        NOT: [AddressScalarWhereInput!]
      }

      type AddressSubscriptionPayload {
        mutation: MutationType!
        node: Address
        updatedFields: [String!]
        previousValues: AddressPreviousValues
      }

      input AddressSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: AddressWhereInput
        AND: [AddressSubscriptionWhereInput!]
        OR: [AddressSubscriptionWhereInput!]
        NOT: [AddressSubscriptionWhereInput!]
      }

      input AddressUpdateInput {
        user: UserUpdateOneRequiredWithoutAddressesInput
        active: Boolean
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoId: String
      }

      input AddressUpdateManyDataInput {
        active: Boolean
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoId: String
      }

      input AddressUpdateManyMutationInput {
        active: Boolean
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoId: String
      }

      input AddressUpdateManyWithoutUserInput {
        create: [AddressCreateWithoutUserInput!]
        delete: [AddressWhereUniqueInput!]
        connect: [AddressWhereUniqueInput!]
        set: [AddressWhereUniqueInput!]
        disconnect: [AddressWhereUniqueInput!]
        update: [AddressUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [AddressUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [AddressScalarWhereInput!]
        updateMany: [AddressUpdateManyWithWhereNestedInput!]
      }

      input AddressUpdateManyWithWhereNestedInput {
        where: AddressScalarWhereInput!
        data: AddressUpdateManyDataInput!
      }

      input AddressUpdateWithoutUserDataInput {
        active: Boolean
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoId: String
      }

      input AddressUpdateWithWhereUniqueWithoutUserInput {
        where: AddressWhereUniqueInput!
        data: AddressUpdateWithoutUserDataInput!
      }

      input AddressUpsertWithWhereUniqueWithoutUserInput {
        where: AddressWhereUniqueInput!
        update: AddressUpdateWithoutUserDataInput!
        create: AddressCreateWithoutUserInput!
      }

      input AddressWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        user: UserWhereInput
        active: Boolean
        active_not: Boolean
        addressOne: String
        addressOne_not: String
        addressOne_in: [String!]
        addressOne_not_in: [String!]
        addressOne_lt: String
        addressOne_lte: String
        addressOne_gt: String
        addressOne_gte: String
        addressOne_contains: String
        addressOne_not_contains: String
        addressOne_starts_with: String
        addressOne_not_starts_with: String
        addressOne_ends_with: String
        addressOne_not_ends_with: String
        addressTwo: String
        addressTwo_not: String
        addressTwo_in: [String!]
        addressTwo_not_in: [String!]
        addressTwo_lt: String
        addressTwo_lte: String
        addressTwo_gt: String
        addressTwo_gte: String
        addressTwo_contains: String
        addressTwo_not_contains: String
        addressTwo_starts_with: String
        addressTwo_not_starts_with: String
        addressTwo_ends_with: String
        addressTwo_not_ends_with: String
        city: String
        city_not: String
        city_in: [String!]
        city_not_in: [String!]
        city_lt: String
        city_lte: String
        city_gt: String
        city_gte: String
        city_contains: String
        city_not_contains: String
        city_starts_with: String
        city_not_starts_with: String
        city_ends_with: String
        city_not_ends_with: String
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        zipcode: String
        zipcode_not: String
        zipcode_in: [String!]
        zipcode_not_in: [String!]
        zipcode_lt: String
        zipcode_lte: String
        zipcode_gt: String
        zipcode_gte: String
        zipcode_contains: String
        zipcode_not_contains: String
        zipcode_starts_with: String
        zipcode_not_starts_with: String
        zipcode_ends_with: String
        zipcode_not_ends_with: String
        telephone: String
        telephone_not: String
        telephone_in: [String!]
        telephone_not_in: [String!]
        telephone_lt: String
        telephone_lte: String
        telephone_gt: String
        telephone_gte: String
        telephone_contains: String
        telephone_not_contains: String
        telephone_starts_with: String
        telephone_not_starts_with: String
        telephone_ends_with: String
        telephone_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        shippoId: String
        shippoId_not: String
        shippoId_in: [String!]
        shippoId_not_in: [String!]
        shippoId_lt: String
        shippoId_lte: String
        shippoId_gt: String
        shippoId_gte: String
        shippoId_contains: String
        shippoId_not_contains: String
        shippoId_starts_with: String
        shippoId_not_starts_with: String
        shippoId_ends_with: String
        shippoId_not_ends_with: String
        AND: [AddressWhereInput!]
        OR: [AddressWhereInput!]
        NOT: [AddressWhereInput!]
      }

      input AddressWhereUniqueInput {
        id: ID
      }

      type AggregateAddress {
        count: Int!
      }

      type AggregateCreditCard {
        count: Int!
      }

      type AggregateDiscount {
        count: Int!
      }

      type AggregateInterest {
        count: Int!
      }

      type AggregateMessage {
        count: Int!
      }

      type AggregateOrder {
        count: Int!
      }

      type AggregatePrescription {
        count: Int!
      }

      type AggregateProduct {
        count: Int!
      }

      type AggregateUser {
        count: Int!
      }

      type AggregateVisit {
        count: Int!
      }

      type BatchPayload {
        count: Long!
      }

      type CreditCard {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        active: Boolean!
        user: User!
        ccToken: String!
        ccType: String!
        ccNumber: String!
        ccExpire: String!
      }

      type CreditCardConnection {
        pageInfo: PageInfo!
        edges: [CreditCardEdge]!
        aggregate: AggregateCreditCard!
      }

      input CreditCardCreateInput {
        id: ID
        active: Boolean
        user: UserCreateOneWithoutCreditCardsInput!
        ccToken: String!
        ccType: String!
        ccNumber: String!
        ccExpire: String!
      }

      input CreditCardCreateManyWithoutUserInput {
        create: [CreditCardCreateWithoutUserInput!]
        connect: [CreditCardWhereUniqueInput!]
      }

      input CreditCardCreateOneInput {
        create: CreditCardCreateInput
        connect: CreditCardWhereUniqueInput
      }

      input CreditCardCreateWithoutUserInput {
        id: ID
        active: Boolean
        ccToken: String!
        ccType: String!
        ccNumber: String!
        ccExpire: String!
      }

      type CreditCardEdge {
        node: CreditCard!
        cursor: String!
      }

      enum CreditCardOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        active_ASC
        active_DESC
        ccToken_ASC
        ccToken_DESC
        ccType_ASC
        ccType_DESC
        ccNumber_ASC
        ccNumber_DESC
        ccExpire_ASC
        ccExpire_DESC
      }

      type CreditCardPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        active: Boolean!
        ccToken: String!
        ccType: String!
        ccNumber: String!
        ccExpire: String!
      }

      input CreditCardScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        active: Boolean
        active_not: Boolean
        ccToken: String
        ccToken_not: String
        ccToken_in: [String!]
        ccToken_not_in: [String!]
        ccToken_lt: String
        ccToken_lte: String
        ccToken_gt: String
        ccToken_gte: String
        ccToken_contains: String
        ccToken_not_contains: String
        ccToken_starts_with: String
        ccToken_not_starts_with: String
        ccToken_ends_with: String
        ccToken_not_ends_with: String
        ccType: String
        ccType_not: String
        ccType_in: [String!]
        ccType_not_in: [String!]
        ccType_lt: String
        ccType_lte: String
        ccType_gt: String
        ccType_gte: String
        ccType_contains: String
        ccType_not_contains: String
        ccType_starts_with: String
        ccType_not_starts_with: String
        ccType_ends_with: String
        ccType_not_ends_with: String
        ccNumber: String
        ccNumber_not: String
        ccNumber_in: [String!]
        ccNumber_not_in: [String!]
        ccNumber_lt: String
        ccNumber_lte: String
        ccNumber_gt: String
        ccNumber_gte: String
        ccNumber_contains: String
        ccNumber_not_contains: String
        ccNumber_starts_with: String
        ccNumber_not_starts_with: String
        ccNumber_ends_with: String
        ccNumber_not_ends_with: String
        ccExpire: String
        ccExpire_not: String
        ccExpire_in: [String!]
        ccExpire_not_in: [String!]
        ccExpire_lt: String
        ccExpire_lte: String
        ccExpire_gt: String
        ccExpire_gte: String
        ccExpire_contains: String
        ccExpire_not_contains: String
        ccExpire_starts_with: String
        ccExpire_not_starts_with: String
        ccExpire_ends_with: String
        ccExpire_not_ends_with: String
        AND: [CreditCardScalarWhereInput!]
        OR: [CreditCardScalarWhereInput!]
        NOT: [CreditCardScalarWhereInput!]
      }

      type CreditCardSubscriptionPayload {
        mutation: MutationType!
        node: CreditCard
        updatedFields: [String!]
        previousValues: CreditCardPreviousValues
      }

      input CreditCardSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: CreditCardWhereInput
        AND: [CreditCardSubscriptionWhereInput!]
        OR: [CreditCardSubscriptionWhereInput!]
        NOT: [CreditCardSubscriptionWhereInput!]
      }

      input CreditCardUpdateDataInput {
        active: Boolean
        user: UserUpdateOneRequiredWithoutCreditCardsInput
        ccToken: String
        ccType: String
        ccNumber: String
        ccExpire: String
      }

      input CreditCardUpdateInput {
        active: Boolean
        user: UserUpdateOneRequiredWithoutCreditCardsInput
        ccToken: String
        ccType: String
        ccNumber: String
        ccExpire: String
      }

      input CreditCardUpdateManyDataInput {
        active: Boolean
        ccToken: String
        ccType: String
        ccNumber: String
        ccExpire: String
      }

      input CreditCardUpdateManyMutationInput {
        active: Boolean
        ccToken: String
        ccType: String
        ccNumber: String
        ccExpire: String
      }

      input CreditCardUpdateManyWithoutUserInput {
        create: [CreditCardCreateWithoutUserInput!]
        delete: [CreditCardWhereUniqueInput!]
        connect: [CreditCardWhereUniqueInput!]
        set: [CreditCardWhereUniqueInput!]
        disconnect: [CreditCardWhereUniqueInput!]
        update: [CreditCardUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [CreditCardUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [CreditCardScalarWhereInput!]
        updateMany: [CreditCardUpdateManyWithWhereNestedInput!]
      }

      input CreditCardUpdateManyWithWhereNestedInput {
        where: CreditCardScalarWhereInput!
        data: CreditCardUpdateManyDataInput!
      }

      input CreditCardUpdateOneInput {
        create: CreditCardCreateInput
        update: CreditCardUpdateDataInput
        upsert: CreditCardUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: CreditCardWhereUniqueInput
      }

      input CreditCardUpdateWithoutUserDataInput {
        active: Boolean
        ccToken: String
        ccType: String
        ccNumber: String
        ccExpire: String
      }

      input CreditCardUpdateWithWhereUniqueWithoutUserInput {
        where: CreditCardWhereUniqueInput!
        data: CreditCardUpdateWithoutUserDataInput!
      }

      input CreditCardUpsertNestedInput {
        update: CreditCardUpdateDataInput!
        create: CreditCardCreateInput!
      }

      input CreditCardUpsertWithWhereUniqueWithoutUserInput {
        where: CreditCardWhereUniqueInput!
        update: CreditCardUpdateWithoutUserDataInput!
        create: CreditCardCreateWithoutUserInput!
      }

      input CreditCardWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        active: Boolean
        active_not: Boolean
        user: UserWhereInput
        ccToken: String
        ccToken_not: String
        ccToken_in: [String!]
        ccToken_not_in: [String!]
        ccToken_lt: String
        ccToken_lte: String
        ccToken_gt: String
        ccToken_gte: String
        ccToken_contains: String
        ccToken_not_contains: String
        ccToken_starts_with: String
        ccToken_not_starts_with: String
        ccToken_ends_with: String
        ccToken_not_ends_with: String
        ccType: String
        ccType_not: String
        ccType_in: [String!]
        ccType_not_in: [String!]
        ccType_lt: String
        ccType_lte: String
        ccType_gt: String
        ccType_gte: String
        ccType_contains: String
        ccType_not_contains: String
        ccType_starts_with: String
        ccType_not_starts_with: String
        ccType_ends_with: String
        ccType_not_ends_with: String
        ccNumber: String
        ccNumber_not: String
        ccNumber_in: [String!]
        ccNumber_not_in: [String!]
        ccNumber_lt: String
        ccNumber_lte: String
        ccNumber_gt: String
        ccNumber_gte: String
        ccNumber_contains: String
        ccNumber_not_contains: String
        ccNumber_starts_with: String
        ccNumber_not_starts_with: String
        ccNumber_ends_with: String
        ccNumber_not_ends_with: String
        ccExpire: String
        ccExpire_not: String
        ccExpire_in: [String!]
        ccExpire_not_in: [String!]
        ccExpire_lt: String
        ccExpire_lte: String
        ccExpire_gt: String
        ccExpire_gte: String
        ccExpire_contains: String
        ccExpire_not_contains: String
        ccExpire_starts_with: String
        ccExpire_not_starts_with: String
        ccExpire_ends_with: String
        ccExpire_not_ends_with: String
        AND: [CreditCardWhereInput!]
        OR: [CreditCardWhereInput!]
        NOT: [CreditCardWhereInput!]
      }

      input CreditCardWhereUniqueInput {
        id: ID
      }

      scalar DateTime

      type Discount {
        id: ID!
        code: String!
        amount: Int!
        percent: Float!
      }

      type DiscountConnection {
        pageInfo: PageInfo!
        edges: [DiscountEdge]!
        aggregate: AggregateDiscount!
      }

      input DiscountCreateInput {
        id: ID
        code: String!
        amount: Int!
        percent: Float
      }

      type DiscountEdge {
        node: Discount!
        cursor: String!
      }

      enum DiscountOrderByInput {
        id_ASC
        id_DESC
        code_ASC
        code_DESC
        amount_ASC
        amount_DESC
        percent_ASC
        percent_DESC
      }

      type DiscountPreviousValues {
        id: ID!
        code: String!
        amount: Int!
        percent: Float!
      }

      type DiscountSubscriptionPayload {
        mutation: MutationType!
        node: Discount
        updatedFields: [String!]
        previousValues: DiscountPreviousValues
      }

      input DiscountSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: DiscountWhereInput
        AND: [DiscountSubscriptionWhereInput!]
        OR: [DiscountSubscriptionWhereInput!]
        NOT: [DiscountSubscriptionWhereInput!]
      }

      input DiscountUpdateInput {
        code: String
        amount: Int
        percent: Float
      }

      input DiscountUpdateManyMutationInput {
        code: String
        amount: Int
        percent: Float
      }

      input DiscountWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        code: String
        code_not: String
        code_in: [String!]
        code_not_in: [String!]
        code_lt: String
        code_lte: String
        code_gt: String
        code_gte: String
        code_contains: String
        code_not_contains: String
        code_starts_with: String
        code_not_starts_with: String
        code_ends_with: String
        code_not_ends_with: String
        amount: Int
        amount_not: Int
        amount_in: [Int!]
        amount_not_in: [Int!]
        amount_lt: Int
        amount_lte: Int
        amount_gt: Int
        amount_gte: Int
        percent: Float
        percent_not: Float
        percent_in: [Float!]
        percent_not_in: [Float!]
        percent_lt: Float
        percent_lte: Float
        percent_gt: Float
        percent_gte: Float
        AND: [DiscountWhereInput!]
        OR: [DiscountWhereInput!]
        NOT: [DiscountWhereInput!]
      }

      input DiscountWhereUniqueInput {
        id: ID
        code: String
      }

      type Interest {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        email: String!
        category: String
        note: String
      }

      type InterestConnection {
        pageInfo: PageInfo!
        edges: [InterestEdge]!
        aggregate: AggregateInterest!
      }

      input InterestCreateInput {
        id: ID
        email: String!
        category: String
        note: String
      }

      type InterestEdge {
        node: Interest!
        cursor: String!
      }

      enum InterestOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        email_ASC
        email_DESC
        category_ASC
        category_DESC
        note_ASC
        note_DESC
      }

      type InterestPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        email: String!
        category: String
        note: String
      }

      type InterestSubscriptionPayload {
        mutation: MutationType!
        node: Interest
        updatedFields: [String!]
        previousValues: InterestPreviousValues
      }

      input InterestSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: InterestWhereInput
        AND: [InterestSubscriptionWhereInput!]
        OR: [InterestSubscriptionWhereInput!]
        NOT: [InterestSubscriptionWhereInput!]
      }

      input InterestUpdateInput {
        email: String
        category: String
        note: String
      }

      input InterestUpdateManyMutationInput {
        email: String
        category: String
        note: String
      }

      input InterestWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        category: String
        category_not: String
        category_in: [String!]
        category_not_in: [String!]
        category_lt: String
        category_lte: String
        category_gt: String
        category_gte: String
        category_contains: String
        category_not_contains: String
        category_starts_with: String
        category_not_starts_with: String
        category_ends_with: String
        category_not_ends_with: String
        note: String
        note_not: String
        note_in: [String!]
        note_not_in: [String!]
        note_lt: String
        note_lte: String
        note_gt: String
        note_gte: String
        note_contains: String
        note_not_contains: String
        note_starts_with: String
        note_not_starts_with: String
        note_ends_with: String
        note_not_ends_with: String
        AND: [InterestWhereInput!]
        OR: [InterestWhereInput!]
        NOT: [InterestWhereInput!]
      }

      input InterestWhereUniqueInput {
        id: ID
      }

      scalar Json

      scalar Long

      type Message {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        prescription: Prescription!
        private: Boolean!
        read: Boolean!
        fromPatient: Boolean!
        physician: User
        user: User!
        text: String!
      }

      type MessageConnection {
        pageInfo: PageInfo!
        edges: [MessageEdge]!
        aggregate: AggregateMessage!
      }

      input MessageCreateInput {
        id: ID
        prescription: PrescriptionCreateOneWithoutMessagesInput!
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        physician: UserCreateOneInput
        user: UserCreateOneInput!
        text: String!
      }

      input MessageCreateManyWithoutPrescriptionInput {
        create: [MessageCreateWithoutPrescriptionInput!]
        connect: [MessageWhereUniqueInput!]
      }

      input MessageCreateWithoutPrescriptionInput {
        id: ID
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        physician: UserCreateOneInput
        user: UserCreateOneInput!
        text: String!
      }

      type MessageEdge {
        node: Message!
        cursor: String!
      }

      enum MessageOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        private_ASC
        private_DESC
        read_ASC
        read_DESC
        fromPatient_ASC
        fromPatient_DESC
        text_ASC
        text_DESC
      }

      type MessagePreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        private: Boolean!
        read: Boolean!
        fromPatient: Boolean!
        text: String!
      }

      input MessageScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        private: Boolean
        private_not: Boolean
        read: Boolean
        read_not: Boolean
        fromPatient: Boolean
        fromPatient_not: Boolean
        text: String
        text_not: String
        text_in: [String!]
        text_not_in: [String!]
        text_lt: String
        text_lte: String
        text_gt: String
        text_gte: String
        text_contains: String
        text_not_contains: String
        text_starts_with: String
        text_not_starts_with: String
        text_ends_with: String
        text_not_ends_with: String
        AND: [MessageScalarWhereInput!]
        OR: [MessageScalarWhereInput!]
        NOT: [MessageScalarWhereInput!]
      }

      type MessageSubscriptionPayload {
        mutation: MutationType!
        node: Message
        updatedFields: [String!]
        previousValues: MessagePreviousValues
      }

      input MessageSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: MessageWhereInput
        AND: [MessageSubscriptionWhereInput!]
        OR: [MessageSubscriptionWhereInput!]
        NOT: [MessageSubscriptionWhereInput!]
      }

      input MessageUpdateInput {
        prescription: PrescriptionUpdateOneRequiredWithoutMessagesInput
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        physician: UserUpdateOneInput
        user: UserUpdateOneRequiredInput
        text: String
      }

      input MessageUpdateManyDataInput {
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        text: String
      }

      input MessageUpdateManyMutationInput {
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        text: String
      }

      input MessageUpdateManyWithoutPrescriptionInput {
        create: [MessageCreateWithoutPrescriptionInput!]
        delete: [MessageWhereUniqueInput!]
        connect: [MessageWhereUniqueInput!]
        set: [MessageWhereUniqueInput!]
        disconnect: [MessageWhereUniqueInput!]
        update: [MessageUpdateWithWhereUniqueWithoutPrescriptionInput!]
        upsert: [MessageUpsertWithWhereUniqueWithoutPrescriptionInput!]
        deleteMany: [MessageScalarWhereInput!]
        updateMany: [MessageUpdateManyWithWhereNestedInput!]
      }

      input MessageUpdateManyWithWhereNestedInput {
        where: MessageScalarWhereInput!
        data: MessageUpdateManyDataInput!
      }

      input MessageUpdateWithoutPrescriptionDataInput {
        private: Boolean
        read: Boolean
        fromPatient: Boolean
        physician: UserUpdateOneInput
        user: UserUpdateOneRequiredInput
        text: String
      }

      input MessageUpdateWithWhereUniqueWithoutPrescriptionInput {
        where: MessageWhereUniqueInput!
        data: MessageUpdateWithoutPrescriptionDataInput!
      }

      input MessageUpsertWithWhereUniqueWithoutPrescriptionInput {
        where: MessageWhereUniqueInput!
        update: MessageUpdateWithoutPrescriptionDataInput!
        create: MessageCreateWithoutPrescriptionInput!
      }

      input MessageWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        prescription: PrescriptionWhereInput
        private: Boolean
        private_not: Boolean
        read: Boolean
        read_not: Boolean
        fromPatient: Boolean
        fromPatient_not: Boolean
        physician: UserWhereInput
        user: UserWhereInput
        text: String
        text_not: String
        text_in: [String!]
        text_not_in: [String!]
        text_lt: String
        text_lte: String
        text_gt: String
        text_gte: String
        text_contains: String
        text_not_contains: String
        text_starts_with: String
        text_not_starts_with: String
        text_ends_with: String
        text_not_ends_with: String
        AND: [MessageWhereInput!]
        OR: [MessageWhereInput!]
        NOT: [MessageWhereInput!]
      }

      input MessageWhereUniqueInput {
        id: ID
      }

      type Mutation {
        createAddress(data: AddressCreateInput!): Address!
        updateAddress(
          data: AddressUpdateInput!
          where: AddressWhereUniqueInput!
        ): Address
        updateManyAddresses(
          data: AddressUpdateManyMutationInput!
          where: AddressWhereInput
        ): BatchPayload!
        upsertAddress(
          where: AddressWhereUniqueInput!
          create: AddressCreateInput!
          update: AddressUpdateInput!
        ): Address!
        deleteAddress(where: AddressWhereUniqueInput!): Address
        deleteManyAddresses(where: AddressWhereInput): BatchPayload!
        createCreditCard(data: CreditCardCreateInput!): CreditCard!
        updateCreditCard(
          data: CreditCardUpdateInput!
          where: CreditCardWhereUniqueInput!
        ): CreditCard
        updateManyCreditCards(
          data: CreditCardUpdateManyMutationInput!
          where: CreditCardWhereInput
        ): BatchPayload!
        upsertCreditCard(
          where: CreditCardWhereUniqueInput!
          create: CreditCardCreateInput!
          update: CreditCardUpdateInput!
        ): CreditCard!
        deleteCreditCard(where: CreditCardWhereUniqueInput!): CreditCard
        deleteManyCreditCards(where: CreditCardWhereInput): BatchPayload!
        createDiscount(data: DiscountCreateInput!): Discount!
        updateDiscount(
          data: DiscountUpdateInput!
          where: DiscountWhereUniqueInput!
        ): Discount
        updateManyDiscounts(
          data: DiscountUpdateManyMutationInput!
          where: DiscountWhereInput
        ): BatchPayload!
        upsertDiscount(
          where: DiscountWhereUniqueInput!
          create: DiscountCreateInput!
          update: DiscountUpdateInput!
        ): Discount!
        deleteDiscount(where: DiscountWhereUniqueInput!): Discount
        deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
        createInterest(data: InterestCreateInput!): Interest!
        updateInterest(
          data: InterestUpdateInput!
          where: InterestWhereUniqueInput!
        ): Interest
        updateManyInterests(
          data: InterestUpdateManyMutationInput!
          where: InterestWhereInput
        ): BatchPayload!
        upsertInterest(
          where: InterestWhereUniqueInput!
          create: InterestCreateInput!
          update: InterestUpdateInput!
        ): Interest!
        deleteInterest(where: InterestWhereUniqueInput!): Interest
        deleteManyInterests(where: InterestWhereInput): BatchPayload!
        createMessage(data: MessageCreateInput!): Message!
        updateMessage(
          data: MessageUpdateInput!
          where: MessageWhereUniqueInput!
        ): Message
        updateManyMessages(
          data: MessageUpdateManyMutationInput!
          where: MessageWhereInput
        ): BatchPayload!
        upsertMessage(
          where: MessageWhereUniqueInput!
          create: MessageCreateInput!
          update: MessageUpdateInput!
        ): Message!
        deleteMessage(where: MessageWhereUniqueInput!): Message
        deleteManyMessages(where: MessageWhereInput): BatchPayload!
        createOrder(data: OrderCreateInput!): Order!
        updateOrder(
          data: OrderUpdateInput!
          where: OrderWhereUniqueInput!
        ): Order
        updateManyOrders(
          data: OrderUpdateManyMutationInput!
          where: OrderWhereInput
        ): BatchPayload!
        upsertOrder(
          where: OrderWhereUniqueInput!
          create: OrderCreateInput!
          update: OrderUpdateInput!
        ): Order!
        deleteOrder(where: OrderWhereUniqueInput!): Order
        deleteManyOrders(where: OrderWhereInput): BatchPayload!
        createPrescription(data: PrescriptionCreateInput!): Prescription!
        updatePrescription(
          data: PrescriptionUpdateInput!
          where: PrescriptionWhereUniqueInput!
        ): Prescription
        updateManyPrescriptions(
          data: PrescriptionUpdateManyMutationInput!
          where: PrescriptionWhereInput
        ): BatchPayload!
        upsertPrescription(
          where: PrescriptionWhereUniqueInput!
          create: PrescriptionCreateInput!
          update: PrescriptionUpdateInput!
        ): Prescription!
        deletePrescription(where: PrescriptionWhereUniqueInput!): Prescription
        deleteManyPrescriptions(where: PrescriptionWhereInput): BatchPayload!
        createProduct(data: ProductCreateInput!): Product!
        updateProduct(
          data: ProductUpdateInput!
          where: ProductWhereUniqueInput!
        ): Product
        updateManyProducts(
          data: ProductUpdateManyMutationInput!
          where: ProductWhereInput
        ): BatchPayload!
        upsertProduct(
          where: ProductWhereUniqueInput!
          create: ProductCreateInput!
          update: ProductUpdateInput!
        ): Product!
        deleteProduct(where: ProductWhereUniqueInput!): Product
        deleteManyProducts(where: ProductWhereInput): BatchPayload!
        createUser(data: UserCreateInput!): User!
        updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
        updateManyUsers(
          data: UserUpdateManyMutationInput!
          where: UserWhereInput
        ): BatchPayload!
        upsertUser(
          where: UserWhereUniqueInput!
          create: UserCreateInput!
          update: UserUpdateInput!
        ): User!
        deleteUser(where: UserWhereUniqueInput!): User
        deleteManyUsers(where: UserWhereInput): BatchPayload!
        createVisit(data: VisitCreateInput!): Visit!
        updateVisit(
          data: VisitUpdateInput!
          where: VisitWhereUniqueInput!
        ): Visit
        updateManyVisits(
          data: VisitUpdateManyMutationInput!
          where: VisitWhereInput
        ): BatchPayload!
        upsertVisit(
          where: VisitWhereUniqueInput!
          create: VisitCreateInput!
          update: VisitUpdateInput!
        ): Visit!
        deleteVisit(where: VisitWhereUniqueInput!): Visit
        deleteManyVisits(where: VisitWhereInput): BatchPayload!
      }

      enum MutationType {
        CREATED
        UPDATED
        DELETED
      }

      interface Node {
        id: ID!
      }

      type Order {
        id: ID!
        orderId: String
        status: OrderStatus!
        createdAt: DateTime!
        updatedAt: DateTime!
        user: User!
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        prescription: Prescription!
        creditCard: CreditCard
        new: Boolean!
        refills: Int!
        amount: Int!
        ccRefNum: String
        refnum: String!
      }

      type OrderConnection {
        pageInfo: PageInfo!
        edges: [OrderEdge]!
        aggregate: AggregateOrder!
      }

      input OrderCreateInput {
        id: ID
        orderId: String
        status: OrderStatus
        user: UserCreateOneInput!
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        prescription: PrescriptionCreateOneWithoutOrdersInput!
        creditCard: CreditCardCreateOneInput
        new: Boolean
        refills: Int!
        amount: Int!
        ccRefNum: String
        refnum: String!
      }

      input OrderCreateManyWithoutPrescriptionInput {
        create: [OrderCreateWithoutPrescriptionInput!]
        connect: [OrderWhereUniqueInput!]
      }

      input OrderCreateWithoutPrescriptionInput {
        id: ID
        orderId: String
        status: OrderStatus
        user: UserCreateOneInput!
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        creditCard: CreditCardCreateOneInput
        new: Boolean
        refills: Int!
        amount: Int!
        ccRefNum: String
        refnum: String!
      }

      type OrderEdge {
        node: Order!
        cursor: String!
      }

      enum OrderOrderByInput {
        id_ASC
        id_DESC
        orderId_ASC
        orderId_DESC
        status_ASC
        status_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        addressOne_ASC
        addressOne_DESC
        addressTwo_ASC
        addressTwo_DESC
        city_ASC
        city_DESC
        state_ASC
        state_DESC
        zipcode_ASC
        zipcode_DESC
        telephone_ASC
        telephone_DESC
        email_ASC
        email_DESC
        shippoAddressId_ASC
        shippoAddressId_DESC
        shippoShipmentId_ASC
        shippoShipmentId_DESC
        shippoBatchId_ASC
        shippoBatchId_DESC
        trackingNumber_ASC
        trackingNumber_DESC
        shipDate_ASC
        shipDate_DESC
        new_ASC
        new_DESC
        refills_ASC
        refills_DESC
        amount_ASC
        amount_DESC
        ccRefNum_ASC
        ccRefNum_DESC
        refnum_ASC
        refnum_DESC
      }

      type OrderPreviousValues {
        id: ID!
        orderId: String
        status: OrderStatus!
        createdAt: DateTime!
        updatedAt: DateTime!
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        new: Boolean!
        refills: Int!
        amount: Int!
        ccRefNum: String
        refnum: String!
      }

      input OrderScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        orderId: String
        orderId_not: String
        orderId_in: [String!]
        orderId_not_in: [String!]
        orderId_lt: String
        orderId_lte: String
        orderId_gt: String
        orderId_gte: String
        orderId_contains: String
        orderId_not_contains: String
        orderId_starts_with: String
        orderId_not_starts_with: String
        orderId_ends_with: String
        orderId_not_ends_with: String
        status: OrderStatus
        status_not: OrderStatus
        status_in: [OrderStatus!]
        status_not_in: [OrderStatus!]
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        addressOne: String
        addressOne_not: String
        addressOne_in: [String!]
        addressOne_not_in: [String!]
        addressOne_lt: String
        addressOne_lte: String
        addressOne_gt: String
        addressOne_gte: String
        addressOne_contains: String
        addressOne_not_contains: String
        addressOne_starts_with: String
        addressOne_not_starts_with: String
        addressOne_ends_with: String
        addressOne_not_ends_with: String
        addressTwo: String
        addressTwo_not: String
        addressTwo_in: [String!]
        addressTwo_not_in: [String!]
        addressTwo_lt: String
        addressTwo_lte: String
        addressTwo_gt: String
        addressTwo_gte: String
        addressTwo_contains: String
        addressTwo_not_contains: String
        addressTwo_starts_with: String
        addressTwo_not_starts_with: String
        addressTwo_ends_with: String
        addressTwo_not_ends_with: String
        city: String
        city_not: String
        city_in: [String!]
        city_not_in: [String!]
        city_lt: String
        city_lte: String
        city_gt: String
        city_gte: String
        city_contains: String
        city_not_contains: String
        city_starts_with: String
        city_not_starts_with: String
        city_ends_with: String
        city_not_ends_with: String
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        zipcode: String
        zipcode_not: String
        zipcode_in: [String!]
        zipcode_not_in: [String!]
        zipcode_lt: String
        zipcode_lte: String
        zipcode_gt: String
        zipcode_gte: String
        zipcode_contains: String
        zipcode_not_contains: String
        zipcode_starts_with: String
        zipcode_not_starts_with: String
        zipcode_ends_with: String
        zipcode_not_ends_with: String
        telephone: String
        telephone_not: String
        telephone_in: [String!]
        telephone_not_in: [String!]
        telephone_lt: String
        telephone_lte: String
        telephone_gt: String
        telephone_gte: String
        telephone_contains: String
        telephone_not_contains: String
        telephone_starts_with: String
        telephone_not_starts_with: String
        telephone_ends_with: String
        telephone_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        shippoAddressId: String
        shippoAddressId_not: String
        shippoAddressId_in: [String!]
        shippoAddressId_not_in: [String!]
        shippoAddressId_lt: String
        shippoAddressId_lte: String
        shippoAddressId_gt: String
        shippoAddressId_gte: String
        shippoAddressId_contains: String
        shippoAddressId_not_contains: String
        shippoAddressId_starts_with: String
        shippoAddressId_not_starts_with: String
        shippoAddressId_ends_with: String
        shippoAddressId_not_ends_with: String
        shippoShipmentId: String
        shippoShipmentId_not: String
        shippoShipmentId_in: [String!]
        shippoShipmentId_not_in: [String!]
        shippoShipmentId_lt: String
        shippoShipmentId_lte: String
        shippoShipmentId_gt: String
        shippoShipmentId_gte: String
        shippoShipmentId_contains: String
        shippoShipmentId_not_contains: String
        shippoShipmentId_starts_with: String
        shippoShipmentId_not_starts_with: String
        shippoShipmentId_ends_with: String
        shippoShipmentId_not_ends_with: String
        shippoBatchId: String
        shippoBatchId_not: String
        shippoBatchId_in: [String!]
        shippoBatchId_not_in: [String!]
        shippoBatchId_lt: String
        shippoBatchId_lte: String
        shippoBatchId_gt: String
        shippoBatchId_gte: String
        shippoBatchId_contains: String
        shippoBatchId_not_contains: String
        shippoBatchId_starts_with: String
        shippoBatchId_not_starts_with: String
        shippoBatchId_ends_with: String
        shippoBatchId_not_ends_with: String
        trackingNumber: String
        trackingNumber_not: String
        trackingNumber_in: [String!]
        trackingNumber_not_in: [String!]
        trackingNumber_lt: String
        trackingNumber_lte: String
        trackingNumber_gt: String
        trackingNumber_gte: String
        trackingNumber_contains: String
        trackingNumber_not_contains: String
        trackingNumber_starts_with: String
        trackingNumber_not_starts_with: String
        trackingNumber_ends_with: String
        trackingNumber_not_ends_with: String
        shipDate: DateTime
        shipDate_not: DateTime
        shipDate_in: [DateTime!]
        shipDate_not_in: [DateTime!]
        shipDate_lt: DateTime
        shipDate_lte: DateTime
        shipDate_gt: DateTime
        shipDate_gte: DateTime
        new: Boolean
        new_not: Boolean
        refills: Int
        refills_not: Int
        refills_in: [Int!]
        refills_not_in: [Int!]
        refills_lt: Int
        refills_lte: Int
        refills_gt: Int
        refills_gte: Int
        amount: Int
        amount_not: Int
        amount_in: [Int!]
        amount_not_in: [Int!]
        amount_lt: Int
        amount_lte: Int
        amount_gt: Int
        amount_gte: Int
        ccRefNum: String
        ccRefNum_not: String
        ccRefNum_in: [String!]
        ccRefNum_not_in: [String!]
        ccRefNum_lt: String
        ccRefNum_lte: String
        ccRefNum_gt: String
        ccRefNum_gte: String
        ccRefNum_contains: String
        ccRefNum_not_contains: String
        ccRefNum_starts_with: String
        ccRefNum_not_starts_with: String
        ccRefNum_ends_with: String
        ccRefNum_not_ends_with: String
        refnum: String
        refnum_not: String
        refnum_in: [String!]
        refnum_not_in: [String!]
        refnum_lt: String
        refnum_lte: String
        refnum_gt: String
        refnum_gte: String
        refnum_contains: String
        refnum_not_contains: String
        refnum_starts_with: String
        refnum_not_starts_with: String
        refnum_ends_with: String
        refnum_not_ends_with: String
        AND: [OrderScalarWhereInput!]
        OR: [OrderScalarWhereInput!]
        NOT: [OrderScalarWhereInput!]
      }

      enum OrderStatus {
        PENDING
        PROCESSING
        SHIPPED
        PAYMENT_DECLINED
      }

      type OrderSubscriptionPayload {
        mutation: MutationType!
        node: Order
        updatedFields: [String!]
        previousValues: OrderPreviousValues
      }

      input OrderSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: OrderWhereInput
        AND: [OrderSubscriptionWhereInput!]
        OR: [OrderSubscriptionWhereInput!]
        NOT: [OrderSubscriptionWhereInput!]
      }

      input OrderUpdateInput {
        orderId: String
        status: OrderStatus
        user: UserUpdateOneRequiredInput
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        prescription: PrescriptionUpdateOneRequiredWithoutOrdersInput
        creditCard: CreditCardUpdateOneInput
        new: Boolean
        refills: Int
        amount: Int
        ccRefNum: String
        refnum: String
      }

      input OrderUpdateManyDataInput {
        orderId: String
        status: OrderStatus
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        new: Boolean
        refills: Int
        amount: Int
        ccRefNum: String
        refnum: String
      }

      input OrderUpdateManyMutationInput {
        orderId: String
        status: OrderStatus
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        new: Boolean
        refills: Int
        amount: Int
        ccRefNum: String
        refnum: String
      }

      input OrderUpdateManyWithoutPrescriptionInput {
        create: [OrderCreateWithoutPrescriptionInput!]
        delete: [OrderWhereUniqueInput!]
        connect: [OrderWhereUniqueInput!]
        set: [OrderWhereUniqueInput!]
        disconnect: [OrderWhereUniqueInput!]
        update: [OrderUpdateWithWhereUniqueWithoutPrescriptionInput!]
        upsert: [OrderUpsertWithWhereUniqueWithoutPrescriptionInput!]
        deleteMany: [OrderScalarWhereInput!]
        updateMany: [OrderUpdateManyWithWhereNestedInput!]
      }

      input OrderUpdateManyWithWhereNestedInput {
        where: OrderScalarWhereInput!
        data: OrderUpdateManyDataInput!
      }

      input OrderUpdateWithoutPrescriptionDataInput {
        orderId: String
        status: OrderStatus
        user: UserUpdateOneRequiredInput
        addressOne: String
        addressTwo: String
        city: String
        state: String
        zipcode: String
        telephone: String
        email: String
        shippoAddressId: String
        shippoShipmentId: String
        shippoBatchId: String
        trackingNumber: String
        shipDate: DateTime
        creditCard: CreditCardUpdateOneInput
        new: Boolean
        refills: Int
        amount: Int
        ccRefNum: String
        refnum: String
      }

      input OrderUpdateWithWhereUniqueWithoutPrescriptionInput {
        where: OrderWhereUniqueInput!
        data: OrderUpdateWithoutPrescriptionDataInput!
      }

      input OrderUpsertWithWhereUniqueWithoutPrescriptionInput {
        where: OrderWhereUniqueInput!
        update: OrderUpdateWithoutPrescriptionDataInput!
        create: OrderCreateWithoutPrescriptionInput!
      }

      input OrderWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        orderId: String
        orderId_not: String
        orderId_in: [String!]
        orderId_not_in: [String!]
        orderId_lt: String
        orderId_lte: String
        orderId_gt: String
        orderId_gte: String
        orderId_contains: String
        orderId_not_contains: String
        orderId_starts_with: String
        orderId_not_starts_with: String
        orderId_ends_with: String
        orderId_not_ends_with: String
        status: OrderStatus
        status_not: OrderStatus
        status_in: [OrderStatus!]
        status_not_in: [OrderStatus!]
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        user: UserWhereInput
        addressOne: String
        addressOne_not: String
        addressOne_in: [String!]
        addressOne_not_in: [String!]
        addressOne_lt: String
        addressOne_lte: String
        addressOne_gt: String
        addressOne_gte: String
        addressOne_contains: String
        addressOne_not_contains: String
        addressOne_starts_with: String
        addressOne_not_starts_with: String
        addressOne_ends_with: String
        addressOne_not_ends_with: String
        addressTwo: String
        addressTwo_not: String
        addressTwo_in: [String!]
        addressTwo_not_in: [String!]
        addressTwo_lt: String
        addressTwo_lte: String
        addressTwo_gt: String
        addressTwo_gte: String
        addressTwo_contains: String
        addressTwo_not_contains: String
        addressTwo_starts_with: String
        addressTwo_not_starts_with: String
        addressTwo_ends_with: String
        addressTwo_not_ends_with: String
        city: String
        city_not: String
        city_in: [String!]
        city_not_in: [String!]
        city_lt: String
        city_lte: String
        city_gt: String
        city_gte: String
        city_contains: String
        city_not_contains: String
        city_starts_with: String
        city_not_starts_with: String
        city_ends_with: String
        city_not_ends_with: String
        state: String
        state_not: String
        state_in: [String!]
        state_not_in: [String!]
        state_lt: String
        state_lte: String
        state_gt: String
        state_gte: String
        state_contains: String
        state_not_contains: String
        state_starts_with: String
        state_not_starts_with: String
        state_ends_with: String
        state_not_ends_with: String
        zipcode: String
        zipcode_not: String
        zipcode_in: [String!]
        zipcode_not_in: [String!]
        zipcode_lt: String
        zipcode_lte: String
        zipcode_gt: String
        zipcode_gte: String
        zipcode_contains: String
        zipcode_not_contains: String
        zipcode_starts_with: String
        zipcode_not_starts_with: String
        zipcode_ends_with: String
        zipcode_not_ends_with: String
        telephone: String
        telephone_not: String
        telephone_in: [String!]
        telephone_not_in: [String!]
        telephone_lt: String
        telephone_lte: String
        telephone_gt: String
        telephone_gte: String
        telephone_contains: String
        telephone_not_contains: String
        telephone_starts_with: String
        telephone_not_starts_with: String
        telephone_ends_with: String
        telephone_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        shippoAddressId: String
        shippoAddressId_not: String
        shippoAddressId_in: [String!]
        shippoAddressId_not_in: [String!]
        shippoAddressId_lt: String
        shippoAddressId_lte: String
        shippoAddressId_gt: String
        shippoAddressId_gte: String
        shippoAddressId_contains: String
        shippoAddressId_not_contains: String
        shippoAddressId_starts_with: String
        shippoAddressId_not_starts_with: String
        shippoAddressId_ends_with: String
        shippoAddressId_not_ends_with: String
        shippoShipmentId: String
        shippoShipmentId_not: String
        shippoShipmentId_in: [String!]
        shippoShipmentId_not_in: [String!]
        shippoShipmentId_lt: String
        shippoShipmentId_lte: String
        shippoShipmentId_gt: String
        shippoShipmentId_gte: String
        shippoShipmentId_contains: String
        shippoShipmentId_not_contains: String
        shippoShipmentId_starts_with: String
        shippoShipmentId_not_starts_with: String
        shippoShipmentId_ends_with: String
        shippoShipmentId_not_ends_with: String
        shippoBatchId: String
        shippoBatchId_not: String
        shippoBatchId_in: [String!]
        shippoBatchId_not_in: [String!]
        shippoBatchId_lt: String
        shippoBatchId_lte: String
        shippoBatchId_gt: String
        shippoBatchId_gte: String
        shippoBatchId_contains: String
        shippoBatchId_not_contains: String
        shippoBatchId_starts_with: String
        shippoBatchId_not_starts_with: String
        shippoBatchId_ends_with: String
        shippoBatchId_not_ends_with: String
        trackingNumber: String
        trackingNumber_not: String
        trackingNumber_in: [String!]
        trackingNumber_not_in: [String!]
        trackingNumber_lt: String
        trackingNumber_lte: String
        trackingNumber_gt: String
        trackingNumber_gte: String
        trackingNumber_contains: String
        trackingNumber_not_contains: String
        trackingNumber_starts_with: String
        trackingNumber_not_starts_with: String
        trackingNumber_ends_with: String
        trackingNumber_not_ends_with: String
        shipDate: DateTime
        shipDate_not: DateTime
        shipDate_in: [DateTime!]
        shipDate_not_in: [DateTime!]
        shipDate_lt: DateTime
        shipDate_lte: DateTime
        shipDate_gt: DateTime
        shipDate_gte: DateTime
        prescription: PrescriptionWhereInput
        creditCard: CreditCardWhereInput
        new: Boolean
        new_not: Boolean
        refills: Int
        refills_not: Int
        refills_in: [Int!]
        refills_not_in: [Int!]
        refills_lt: Int
        refills_lte: Int
        refills_gt: Int
        refills_gte: Int
        amount: Int
        amount_not: Int
        amount_in: [Int!]
        amount_not_in: [Int!]
        amount_lt: Int
        amount_lte: Int
        amount_gt: Int
        amount_gte: Int
        ccRefNum: String
        ccRefNum_not: String
        ccRefNum_in: [String!]
        ccRefNum_not_in: [String!]
        ccRefNum_lt: String
        ccRefNum_lte: String
        ccRefNum_gt: String
        ccRefNum_gte: String
        ccRefNum_contains: String
        ccRefNum_not_contains: String
        ccRefNum_starts_with: String
        ccRefNum_not_starts_with: String
        ccRefNum_ends_with: String
        ccRefNum_not_ends_with: String
        refnum: String
        refnum_not: String
        refnum_in: [String!]
        refnum_not_in: [String!]
        refnum_lt: String
        refnum_lte: String
        refnum_gt: String
        refnum_gte: String
        refnum_contains: String
        refnum_not_contains: String
        refnum_starts_with: String
        refnum_not_starts_with: String
        refnum_ends_with: String
        refnum_not_ends_with: String
        AND: [OrderWhereInput!]
        OR: [OrderWhereInput!]
        NOT: [OrderWhereInput!]
      }

      input OrderWhereUniqueInput {
        id: ID
      }

      type PageInfo {
        hasNextPage: Boolean!
        hasPreviousPage: Boolean!
        startCursor: String
        endCursor: String
      }

      type Prescription {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        status: PrescriptionStatus!
        creditcard: CreditCard
        refnum: String
        user: User!
        visit: Visit!
        type: PrescriptionType!
        product: Product!
        timesPerMonth: Int!
        addon: Product
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean!
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
        orders(
          where: OrderWhereInput
          orderBy: OrderOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Order!]
        messages(
          where: MessageWhereInput
          orderBy: MessageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Message!]
      }

      type PrescriptionConnection {
        pageInfo: PageInfo!
        edges: [PrescriptionEdge]!
        aggregate: AggregatePrescription!
      }

      input PrescriptionCreateInput {
        id: ID
        status: PrescriptionStatus
        creditcard: CreditCardCreateOneInput
        refnum: String
        user: UserCreateOneWithoutPrescriptionsInput!
        visit: VisitCreateOneInput!
        type: PrescriptionType!
        product: ProductCreateOneInput!
        timesPerMonth: Int!
        addon: ProductCreateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
        orders: OrderCreateManyWithoutPrescriptionInput
        messages: MessageCreateManyWithoutPrescriptionInput
      }

      input PrescriptionCreateManyWithoutUserInput {
        create: [PrescriptionCreateWithoutUserInput!]
        connect: [PrescriptionWhereUniqueInput!]
      }

      input PrescriptionCreateOneWithoutMessagesInput {
        create: PrescriptionCreateWithoutMessagesInput
        connect: PrescriptionWhereUniqueInput
      }

      input PrescriptionCreateOneWithoutOrdersInput {
        create: PrescriptionCreateWithoutOrdersInput
        connect: PrescriptionWhereUniqueInput
      }

      input PrescriptionCreateWithoutMessagesInput {
        id: ID
        status: PrescriptionStatus
        creditcard: CreditCardCreateOneInput
        refnum: String
        user: UserCreateOneWithoutPrescriptionsInput!
        visit: VisitCreateOneInput!
        type: PrescriptionType!
        product: ProductCreateOneInput!
        timesPerMonth: Int!
        addon: ProductCreateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
        orders: OrderCreateManyWithoutPrescriptionInput
      }

      input PrescriptionCreateWithoutOrdersInput {
        id: ID
        status: PrescriptionStatus
        creditcard: CreditCardCreateOneInput
        refnum: String
        user: UserCreateOneWithoutPrescriptionsInput!
        visit: VisitCreateOneInput!
        type: PrescriptionType!
        product: ProductCreateOneInput!
        timesPerMonth: Int!
        addon: ProductCreateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
        messages: MessageCreateManyWithoutPrescriptionInput
      }

      input PrescriptionCreateWithoutUserInput {
        id: ID
        status: PrescriptionStatus
        creditcard: CreditCardCreateOneInput
        refnum: String
        visit: VisitCreateOneInput!
        type: PrescriptionType!
        product: ProductCreateOneInput!
        timesPerMonth: Int!
        addon: ProductCreateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
        orders: OrderCreateManyWithoutPrescriptionInput
        messages: MessageCreateManyWithoutPrescriptionInput
      }

      type PrescriptionEdge {
        node: Prescription!
        cursor: String!
      }

      enum PrescriptionOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        status_ASC
        status_DESC
        refnum_ASC
        refnum_DESC
        type_ASC
        type_DESC
        timesPerMonth_ASC
        timesPerMonth_DESC
        addonTimesPerMonth_ASC
        addonTimesPerMonth_DESC
        approvedDate_ASC
        approvedDate_DESC
        startDate_ASC
        startDate_DESC
        expireDate_ASC
        expireDate_DESC
        totalRefills_ASC
        totalRefills_DESC
        refillsRemaining_ASC
        refillsRemaining_DESC
        reminderSent_ASC
        reminderSent_DESC
        nextDelivery_ASC
        nextDelivery_DESC
        shippingInterval_ASC
        shippingInterval_DESC
        amountDue_ASC
        amountDue_DESC
        amountFirstDue_ASC
        amountFirstDue_DESC
        discountCode_ASC
        discountCode_DESC
      }

      type PrescriptionPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        status: PrescriptionStatus!
        refnum: String
        type: PrescriptionType!
        timesPerMonth: Int!
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int!
        refillsRemaining: Int!
        reminderSent: Boolean!
        nextDelivery: DateTime
        shippingInterval: Int!
        amountDue: Int!
        amountFirstDue: Int!
        discountCode: String
      }

      input PrescriptionScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        status: PrescriptionStatus
        status_not: PrescriptionStatus
        status_in: [PrescriptionStatus!]
        status_not_in: [PrescriptionStatus!]
        refnum: String
        refnum_not: String
        refnum_in: [String!]
        refnum_not_in: [String!]
        refnum_lt: String
        refnum_lte: String
        refnum_gt: String
        refnum_gte: String
        refnum_contains: String
        refnum_not_contains: String
        refnum_starts_with: String
        refnum_not_starts_with: String
        refnum_ends_with: String
        refnum_not_ends_with: String
        type: PrescriptionType
        type_not: PrescriptionType
        type_in: [PrescriptionType!]
        type_not_in: [PrescriptionType!]
        timesPerMonth: Int
        timesPerMonth_not: Int
        timesPerMonth_in: [Int!]
        timesPerMonth_not_in: [Int!]
        timesPerMonth_lt: Int
        timesPerMonth_lte: Int
        timesPerMonth_gt: Int
        timesPerMonth_gte: Int
        addonTimesPerMonth: Int
        addonTimesPerMonth_not: Int
        addonTimesPerMonth_in: [Int!]
        addonTimesPerMonth_not_in: [Int!]
        addonTimesPerMonth_lt: Int
        addonTimesPerMonth_lte: Int
        addonTimesPerMonth_gt: Int
        addonTimesPerMonth_gte: Int
        approvedDate: DateTime
        approvedDate_not: DateTime
        approvedDate_in: [DateTime!]
        approvedDate_not_in: [DateTime!]
        approvedDate_lt: DateTime
        approvedDate_lte: DateTime
        approvedDate_gt: DateTime
        approvedDate_gte: DateTime
        startDate: DateTime
        startDate_not: DateTime
        startDate_in: [DateTime!]
        startDate_not_in: [DateTime!]
        startDate_lt: DateTime
        startDate_lte: DateTime
        startDate_gt: DateTime
        startDate_gte: DateTime
        expireDate: DateTime
        expireDate_not: DateTime
        expireDate_in: [DateTime!]
        expireDate_not_in: [DateTime!]
        expireDate_lt: DateTime
        expireDate_lte: DateTime
        expireDate_gt: DateTime
        expireDate_gte: DateTime
        totalRefills: Int
        totalRefills_not: Int
        totalRefills_in: [Int!]
        totalRefills_not_in: [Int!]
        totalRefills_lt: Int
        totalRefills_lte: Int
        totalRefills_gt: Int
        totalRefills_gte: Int
        refillsRemaining: Int
        refillsRemaining_not: Int
        refillsRemaining_in: [Int!]
        refillsRemaining_not_in: [Int!]
        refillsRemaining_lt: Int
        refillsRemaining_lte: Int
        refillsRemaining_gt: Int
        refillsRemaining_gte: Int
        reminderSent: Boolean
        reminderSent_not: Boolean
        nextDelivery: DateTime
        nextDelivery_not: DateTime
        nextDelivery_in: [DateTime!]
        nextDelivery_not_in: [DateTime!]
        nextDelivery_lt: DateTime
        nextDelivery_lte: DateTime
        nextDelivery_gt: DateTime
        nextDelivery_gte: DateTime
        shippingInterval: Int
        shippingInterval_not: Int
        shippingInterval_in: [Int!]
        shippingInterval_not_in: [Int!]
        shippingInterval_lt: Int
        shippingInterval_lte: Int
        shippingInterval_gt: Int
        shippingInterval_gte: Int
        amountDue: Int
        amountDue_not: Int
        amountDue_in: [Int!]
        amountDue_not_in: [Int!]
        amountDue_lt: Int
        amountDue_lte: Int
        amountDue_gt: Int
        amountDue_gte: Int
        amountFirstDue: Int
        amountFirstDue_not: Int
        amountFirstDue_in: [Int!]
        amountFirstDue_not_in: [Int!]
        amountFirstDue_lt: Int
        amountFirstDue_lte: Int
        amountFirstDue_gt: Int
        amountFirstDue_gte: Int
        discountCode: String
        discountCode_not: String
        discountCode_in: [String!]
        discountCode_not_in: [String!]
        discountCode_lt: String
        discountCode_lte: String
        discountCode_gt: String
        discountCode_gte: String
        discountCode_contains: String
        discountCode_not_contains: String
        discountCode_starts_with: String
        discountCode_not_starts_with: String
        discountCode_ends_with: String
        discountCode_not_ends_with: String
        AND: [PrescriptionScalarWhereInput!]
        OR: [PrescriptionScalarWhereInput!]
        NOT: [PrescriptionScalarWhereInput!]
      }

      enum PrescriptionStatus {
        PENDING
        DENIED
        ACTIVE
        CLOSED
      }

      type PrescriptionSubscriptionPayload {
        mutation: MutationType!
        node: Prescription
        updatedFields: [String!]
        previousValues: PrescriptionPreviousValues
      }

      input PrescriptionSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: PrescriptionWhereInput
        AND: [PrescriptionSubscriptionWhereInput!]
        OR: [PrescriptionSubscriptionWhereInput!]
        NOT: [PrescriptionSubscriptionWhereInput!]
      }

      enum PrescriptionType {
        ED
        HAIR
        SLEEP
        JOY
        ALLERGY
        WEIGHT
        SUPPLEMENT
      }

      input PrescriptionUpdateInput {
        status: PrescriptionStatus
        creditcard: CreditCardUpdateOneInput
        refnum: String
        user: UserUpdateOneRequiredWithoutPrescriptionsInput
        visit: VisitUpdateOneRequiredInput
        type: PrescriptionType
        product: ProductUpdateOneRequiredInput
        timesPerMonth: Int
        addon: ProductUpdateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
        orders: OrderUpdateManyWithoutPrescriptionInput
        messages: MessageUpdateManyWithoutPrescriptionInput
      }

      input PrescriptionUpdateManyDataInput {
        status: PrescriptionStatus
        refnum: String
        type: PrescriptionType
        timesPerMonth: Int
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
      }

      input PrescriptionUpdateManyMutationInput {
        status: PrescriptionStatus
        refnum: String
        type: PrescriptionType
        timesPerMonth: Int
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
      }

      input PrescriptionUpdateManyWithoutUserInput {
        create: [PrescriptionCreateWithoutUserInput!]
        delete: [PrescriptionWhereUniqueInput!]
        connect: [PrescriptionWhereUniqueInput!]
        set: [PrescriptionWhereUniqueInput!]
        disconnect: [PrescriptionWhereUniqueInput!]
        update: [PrescriptionUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [PrescriptionUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [PrescriptionScalarWhereInput!]
        updateMany: [PrescriptionUpdateManyWithWhereNestedInput!]
      }

      input PrescriptionUpdateManyWithWhereNestedInput {
        where: PrescriptionScalarWhereInput!
        data: PrescriptionUpdateManyDataInput!
      }

      input PrescriptionUpdateOneRequiredWithoutMessagesInput {
        create: PrescriptionCreateWithoutMessagesInput
        update: PrescriptionUpdateWithoutMessagesDataInput
        upsert: PrescriptionUpsertWithoutMessagesInput
        connect: PrescriptionWhereUniqueInput
      }

      input PrescriptionUpdateOneRequiredWithoutOrdersInput {
        create: PrescriptionCreateWithoutOrdersInput
        update: PrescriptionUpdateWithoutOrdersDataInput
        upsert: PrescriptionUpsertWithoutOrdersInput
        connect: PrescriptionWhereUniqueInput
      }

      input PrescriptionUpdateWithoutMessagesDataInput {
        status: PrescriptionStatus
        creditcard: CreditCardUpdateOneInput
        refnum: String
        user: UserUpdateOneRequiredWithoutPrescriptionsInput
        visit: VisitUpdateOneRequiredInput
        type: PrescriptionType
        product: ProductUpdateOneRequiredInput
        timesPerMonth: Int
        addon: ProductUpdateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
        orders: OrderUpdateManyWithoutPrescriptionInput
      }

      input PrescriptionUpdateWithoutOrdersDataInput {
        status: PrescriptionStatus
        creditcard: CreditCardUpdateOneInput
        refnum: String
        user: UserUpdateOneRequiredWithoutPrescriptionsInput
        visit: VisitUpdateOneRequiredInput
        type: PrescriptionType
        product: ProductUpdateOneRequiredInput
        timesPerMonth: Int
        addon: ProductUpdateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
        messages: MessageUpdateManyWithoutPrescriptionInput
      }

      input PrescriptionUpdateWithoutUserDataInput {
        status: PrescriptionStatus
        creditcard: CreditCardUpdateOneInput
        refnum: String
        visit: VisitUpdateOneRequiredInput
        type: PrescriptionType
        product: ProductUpdateOneRequiredInput
        timesPerMonth: Int
        addon: ProductUpdateOneInput
        addonTimesPerMonth: Int
        approvedDate: DateTime
        startDate: DateTime
        expireDate: DateTime
        totalRefills: Int
        refillsRemaining: Int
        reminderSent: Boolean
        nextDelivery: DateTime
        shippingInterval: Int
        amountDue: Int
        amountFirstDue: Int
        discountCode: String
        orders: OrderUpdateManyWithoutPrescriptionInput
        messages: MessageUpdateManyWithoutPrescriptionInput
      }

      input PrescriptionUpdateWithWhereUniqueWithoutUserInput {
        where: PrescriptionWhereUniqueInput!
        data: PrescriptionUpdateWithoutUserDataInput!
      }

      input PrescriptionUpsertWithoutMessagesInput {
        update: PrescriptionUpdateWithoutMessagesDataInput!
        create: PrescriptionCreateWithoutMessagesInput!
      }

      input PrescriptionUpsertWithoutOrdersInput {
        update: PrescriptionUpdateWithoutOrdersDataInput!
        create: PrescriptionCreateWithoutOrdersInput!
      }

      input PrescriptionUpsertWithWhereUniqueWithoutUserInput {
        where: PrescriptionWhereUniqueInput!
        update: PrescriptionUpdateWithoutUserDataInput!
        create: PrescriptionCreateWithoutUserInput!
      }

      input PrescriptionWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        status: PrescriptionStatus
        status_not: PrescriptionStatus
        status_in: [PrescriptionStatus!]
        status_not_in: [PrescriptionStatus!]
        creditcard: CreditCardWhereInput
        refnum: String
        refnum_not: String
        refnum_in: [String!]
        refnum_not_in: [String!]
        refnum_lt: String
        refnum_lte: String
        refnum_gt: String
        refnum_gte: String
        refnum_contains: String
        refnum_not_contains: String
        refnum_starts_with: String
        refnum_not_starts_with: String
        refnum_ends_with: String
        refnum_not_ends_with: String
        user: UserWhereInput
        visit: VisitWhereInput
        type: PrescriptionType
        type_not: PrescriptionType
        type_in: [PrescriptionType!]
        type_not_in: [PrescriptionType!]
        product: ProductWhereInput
        timesPerMonth: Int
        timesPerMonth_not: Int
        timesPerMonth_in: [Int!]
        timesPerMonth_not_in: [Int!]
        timesPerMonth_lt: Int
        timesPerMonth_lte: Int
        timesPerMonth_gt: Int
        timesPerMonth_gte: Int
        addon: ProductWhereInput
        addonTimesPerMonth: Int
        addonTimesPerMonth_not: Int
        addonTimesPerMonth_in: [Int!]
        addonTimesPerMonth_not_in: [Int!]
        addonTimesPerMonth_lt: Int
        addonTimesPerMonth_lte: Int
        addonTimesPerMonth_gt: Int
        addonTimesPerMonth_gte: Int
        approvedDate: DateTime
        approvedDate_not: DateTime
        approvedDate_in: [DateTime!]
        approvedDate_not_in: [DateTime!]
        approvedDate_lt: DateTime
        approvedDate_lte: DateTime
        approvedDate_gt: DateTime
        approvedDate_gte: DateTime
        startDate: DateTime
        startDate_not: DateTime
        startDate_in: [DateTime!]
        startDate_not_in: [DateTime!]
        startDate_lt: DateTime
        startDate_lte: DateTime
        startDate_gt: DateTime
        startDate_gte: DateTime
        expireDate: DateTime
        expireDate_not: DateTime
        expireDate_in: [DateTime!]
        expireDate_not_in: [DateTime!]
        expireDate_lt: DateTime
        expireDate_lte: DateTime
        expireDate_gt: DateTime
        expireDate_gte: DateTime
        totalRefills: Int
        totalRefills_not: Int
        totalRefills_in: [Int!]
        totalRefills_not_in: [Int!]
        totalRefills_lt: Int
        totalRefills_lte: Int
        totalRefills_gt: Int
        totalRefills_gte: Int
        refillsRemaining: Int
        refillsRemaining_not: Int
        refillsRemaining_in: [Int!]
        refillsRemaining_not_in: [Int!]
        refillsRemaining_lt: Int
        refillsRemaining_lte: Int
        refillsRemaining_gt: Int
        refillsRemaining_gte: Int
        reminderSent: Boolean
        reminderSent_not: Boolean
        nextDelivery: DateTime
        nextDelivery_not: DateTime
        nextDelivery_in: [DateTime!]
        nextDelivery_not_in: [DateTime!]
        nextDelivery_lt: DateTime
        nextDelivery_lte: DateTime
        nextDelivery_gt: DateTime
        nextDelivery_gte: DateTime
        shippingInterval: Int
        shippingInterval_not: Int
        shippingInterval_in: [Int!]
        shippingInterval_not_in: [Int!]
        shippingInterval_lt: Int
        shippingInterval_lte: Int
        shippingInterval_gt: Int
        shippingInterval_gte: Int
        amountDue: Int
        amountDue_not: Int
        amountDue_in: [Int!]
        amountDue_not_in: [Int!]
        amountDue_lt: Int
        amountDue_lte: Int
        amountDue_gt: Int
        amountDue_gte: Int
        amountFirstDue: Int
        amountFirstDue_not: Int
        amountFirstDue_in: [Int!]
        amountFirstDue_not_in: [Int!]
        amountFirstDue_lt: Int
        amountFirstDue_lte: Int
        amountFirstDue_gt: Int
        amountFirstDue_gte: Int
        discountCode: String
        discountCode_not: String
        discountCode_in: [String!]
        discountCode_not_in: [String!]
        discountCode_lt: String
        discountCode_lte: String
        discountCode_gt: String
        discountCode_gte: String
        discountCode_contains: String
        discountCode_not_contains: String
        discountCode_starts_with: String
        discountCode_not_starts_with: String
        discountCode_ends_with: String
        discountCode_not_ends_with: String
        orders_every: OrderWhereInput
        orders_some: OrderWhereInput
        orders_none: OrderWhereInput
        messages_every: MessageWhereInput
        messages_some: MessageWhereInput
        messages_none: MessageWhereInput
        AND: [PrescriptionWhereInput!]
        OR: [PrescriptionWhereInput!]
        NOT: [PrescriptionWhereInput!]
      }

      input PrescriptionWhereUniqueInput {
        id: ID
      }

      type Product {
        id: ID!
        productId: String!
        type: PrescriptionType!
        category: String!
        productName: String!
        display: String!
        default: Boolean!
        doseDisplay: String
        pillsPerDose: Int!
        subTitle: String
        monthlyPrice: Int!
        twoMonthPrice: Int!
        threeMonthPrice: Int!
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      type ProductConnection {
        pageInfo: PageInfo!
        edges: [ProductEdge]!
        aggregate: AggregateProduct!
      }

      input ProductCreateInput {
        id: ID
        productId: String!
        type: PrescriptionType!
        category: String!
        productName: String!
        display: String!
        default: Boolean
        doseDisplay: String
        pillsPerDose: Int
        subTitle: String
        monthlyPrice: Int!
        twoMonthPrice: Int!
        threeMonthPrice: Int!
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      input ProductCreateOneInput {
        create: ProductCreateInput
        connect: ProductWhereUniqueInput
      }

      type ProductEdge {
        node: Product!
        cursor: String!
      }

      enum ProductOrderByInput {
        id_ASC
        id_DESC
        productId_ASC
        productId_DESC
        type_ASC
        type_DESC
        category_ASC
        category_DESC
        productName_ASC
        productName_DESC
        display_ASC
        display_DESC
        default_ASC
        default_DESC
        doseDisplay_ASC
        doseDisplay_DESC
        pillsPerDose_ASC
        pillsPerDose_DESC
        subTitle_ASC
        subTitle_DESC
        monthlyPrice_ASC
        monthlyPrice_DESC
        twoMonthPrice_ASC
        twoMonthPrice_DESC
        threeMonthPrice_ASC
        threeMonthPrice_DESC
        directions_ASC
        directions_DESC
        treatmentUrl_ASC
        treatmentUrl_DESC
        newMessage_ASC
        newMessage_DESC
      }

      type ProductPreviousValues {
        id: ID!
        productId: String!
        type: PrescriptionType!
        category: String!
        productName: String!
        display: String!
        default: Boolean!
        doseDisplay: String
        pillsPerDose: Int!
        subTitle: String
        monthlyPrice: Int!
        twoMonthPrice: Int!
        threeMonthPrice: Int!
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      type ProductSubscriptionPayload {
        mutation: MutationType!
        node: Product
        updatedFields: [String!]
        previousValues: ProductPreviousValues
      }

      input ProductSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: ProductWhereInput
        AND: [ProductSubscriptionWhereInput!]
        OR: [ProductSubscriptionWhereInput!]
        NOT: [ProductSubscriptionWhereInput!]
      }

      input ProductUpdateDataInput {
        productId: String
        type: PrescriptionType
        category: String
        productName: String
        display: String
        default: Boolean
        doseDisplay: String
        pillsPerDose: Int
        subTitle: String
        monthlyPrice: Int
        twoMonthPrice: Int
        threeMonthPrice: Int
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      input ProductUpdateInput {
        productId: String
        type: PrescriptionType
        category: String
        productName: String
        display: String
        default: Boolean
        doseDisplay: String
        pillsPerDose: Int
        subTitle: String
        monthlyPrice: Int
        twoMonthPrice: Int
        threeMonthPrice: Int
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      input ProductUpdateManyMutationInput {
        productId: String
        type: PrescriptionType
        category: String
        productName: String
        display: String
        default: Boolean
        doseDisplay: String
        pillsPerDose: Int
        subTitle: String
        monthlyPrice: Int
        twoMonthPrice: Int
        threeMonthPrice: Int
        directions: String
        treatmentUrl: String
        newMessage: String
      }

      input ProductUpdateOneInput {
        create: ProductCreateInput
        update: ProductUpdateDataInput
        upsert: ProductUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: ProductWhereUniqueInput
      }

      input ProductUpdateOneRequiredInput {
        create: ProductCreateInput
        update: ProductUpdateDataInput
        upsert: ProductUpsertNestedInput
        connect: ProductWhereUniqueInput
      }

      input ProductUpsertNestedInput {
        update: ProductUpdateDataInput!
        create: ProductCreateInput!
      }

      input ProductWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        productId: String
        productId_not: String
        productId_in: [String!]
        productId_not_in: [String!]
        productId_lt: String
        productId_lte: String
        productId_gt: String
        productId_gte: String
        productId_contains: String
        productId_not_contains: String
        productId_starts_with: String
        productId_not_starts_with: String
        productId_ends_with: String
        productId_not_ends_with: String
        type: PrescriptionType
        type_not: PrescriptionType
        type_in: [PrescriptionType!]
        type_not_in: [PrescriptionType!]
        category: String
        category_not: String
        category_in: [String!]
        category_not_in: [String!]
        category_lt: String
        category_lte: String
        category_gt: String
        category_gte: String
        category_contains: String
        category_not_contains: String
        category_starts_with: String
        category_not_starts_with: String
        category_ends_with: String
        category_not_ends_with: String
        productName: String
        productName_not: String
        productName_in: [String!]
        productName_not_in: [String!]
        productName_lt: String
        productName_lte: String
        productName_gt: String
        productName_gte: String
        productName_contains: String
        productName_not_contains: String
        productName_starts_with: String
        productName_not_starts_with: String
        productName_ends_with: String
        productName_not_ends_with: String
        display: String
        display_not: String
        display_in: [String!]
        display_not_in: [String!]
        display_lt: String
        display_lte: String
        display_gt: String
        display_gte: String
        display_contains: String
        display_not_contains: String
        display_starts_with: String
        display_not_starts_with: String
        display_ends_with: String
        display_not_ends_with: String
        default: Boolean
        default_not: Boolean
        doseDisplay: String
        doseDisplay_not: String
        doseDisplay_in: [String!]
        doseDisplay_not_in: [String!]
        doseDisplay_lt: String
        doseDisplay_lte: String
        doseDisplay_gt: String
        doseDisplay_gte: String
        doseDisplay_contains: String
        doseDisplay_not_contains: String
        doseDisplay_starts_with: String
        doseDisplay_not_starts_with: String
        doseDisplay_ends_with: String
        doseDisplay_not_ends_with: String
        pillsPerDose: Int
        pillsPerDose_not: Int
        pillsPerDose_in: [Int!]
        pillsPerDose_not_in: [Int!]
        pillsPerDose_lt: Int
        pillsPerDose_lte: Int
        pillsPerDose_gt: Int
        pillsPerDose_gte: Int
        subTitle: String
        subTitle_not: String
        subTitle_in: [String!]
        subTitle_not_in: [String!]
        subTitle_lt: String
        subTitle_lte: String
        subTitle_gt: String
        subTitle_gte: String
        subTitle_contains: String
        subTitle_not_contains: String
        subTitle_starts_with: String
        subTitle_not_starts_with: String
        subTitle_ends_with: String
        subTitle_not_ends_with: String
        monthlyPrice: Int
        monthlyPrice_not: Int
        monthlyPrice_in: [Int!]
        monthlyPrice_not_in: [Int!]
        monthlyPrice_lt: Int
        monthlyPrice_lte: Int
        monthlyPrice_gt: Int
        monthlyPrice_gte: Int
        twoMonthPrice: Int
        twoMonthPrice_not: Int
        twoMonthPrice_in: [Int!]
        twoMonthPrice_not_in: [Int!]
        twoMonthPrice_lt: Int
        twoMonthPrice_lte: Int
        twoMonthPrice_gt: Int
        twoMonthPrice_gte: Int
        threeMonthPrice: Int
        threeMonthPrice_not: Int
        threeMonthPrice_in: [Int!]
        threeMonthPrice_not_in: [Int!]
        threeMonthPrice_lt: Int
        threeMonthPrice_lte: Int
        threeMonthPrice_gt: Int
        threeMonthPrice_gte: Int
        directions: String
        directions_not: String
        directions_in: [String!]
        directions_not_in: [String!]
        directions_lt: String
        directions_lte: String
        directions_gt: String
        directions_gte: String
        directions_contains: String
        directions_not_contains: String
        directions_starts_with: String
        directions_not_starts_with: String
        directions_ends_with: String
        directions_not_ends_with: String
        treatmentUrl: String
        treatmentUrl_not: String
        treatmentUrl_in: [String!]
        treatmentUrl_not_in: [String!]
        treatmentUrl_lt: String
        treatmentUrl_lte: String
        treatmentUrl_gt: String
        treatmentUrl_gte: String
        treatmentUrl_contains: String
        treatmentUrl_not_contains: String
        treatmentUrl_starts_with: String
        treatmentUrl_not_starts_with: String
        treatmentUrl_ends_with: String
        treatmentUrl_not_ends_with: String
        newMessage: String
        newMessage_not: String
        newMessage_in: [String!]
        newMessage_not_in: [String!]
        newMessage_lt: String
        newMessage_lte: String
        newMessage_gt: String
        newMessage_gte: String
        newMessage_contains: String
        newMessage_not_contains: String
        newMessage_starts_with: String
        newMessage_not_starts_with: String
        newMessage_ends_with: String
        newMessage_not_ends_with: String
        AND: [ProductWhereInput!]
        OR: [ProductWhereInput!]
        NOT: [ProductWhereInput!]
      }

      input ProductWhereUniqueInput {
        id: ID
        productId: String
      }

      type Query {
        address(where: AddressWhereUniqueInput!): Address
        addresses(
          where: AddressWhereInput
          orderBy: AddressOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Address]!
        addressesConnection(
          where: AddressWhereInput
          orderBy: AddressOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): AddressConnection!
        creditCard(where: CreditCardWhereUniqueInput!): CreditCard
        creditCards(
          where: CreditCardWhereInput
          orderBy: CreditCardOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [CreditCard]!
        creditCardsConnection(
          where: CreditCardWhereInput
          orderBy: CreditCardOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): CreditCardConnection!
        discount(where: DiscountWhereUniqueInput!): Discount
        discounts(
          where: DiscountWhereInput
          orderBy: DiscountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Discount]!
        discountsConnection(
          where: DiscountWhereInput
          orderBy: DiscountOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): DiscountConnection!
        interest(where: InterestWhereUniqueInput!): Interest
        interests(
          where: InterestWhereInput
          orderBy: InterestOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Interest]!
        interestsConnection(
          where: InterestWhereInput
          orderBy: InterestOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): InterestConnection!
        message(where: MessageWhereUniqueInput!): Message
        messages(
          where: MessageWhereInput
          orderBy: MessageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Message]!
        messagesConnection(
          where: MessageWhereInput
          orderBy: MessageOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): MessageConnection!
        order(where: OrderWhereUniqueInput!): Order
        orderHistoryById(
          where: OrderWhereInput
          orderBy: OrderOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Order]!
        orders(
          where: OrderWhereInput
          orderBy: OrderOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Order]!
        ordersConnection(
          where: OrderWhereInput
          orderBy: OrderOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): OrderConnection!
        prescription(where: PrescriptionWhereUniqueInput!): Prescription
        prescriptions(
          where: PrescriptionWhereInput
          orderBy: PrescriptionOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Prescription]!
        prescriptionsConnection(
          where: PrescriptionWhereInput
          orderBy: PrescriptionOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): PrescriptionConnection!
        product(where: ProductWhereUniqueInput!): Product
        products(
          where: ProductWhereInput
          orderBy: ProductOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Product]!
        productsConnection(
          where: ProductWhereInput
          orderBy: ProductOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): ProductConnection!
        user(where: UserWhereUniqueInput!): User
        users(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [User]!
        usersConnection(
          where: UserWhereInput
          orderBy: UserOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): UserConnection!
        visit(where: VisitWhereUniqueInput!): Visit
        visits(
          where: VisitWhereInput
          orderBy: VisitOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Visit]!
        visitsConnection(
          where: VisitWhereInput
          orderBy: VisitOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): VisitConnection!
        node(id: ID!): Node
      }

      enum Role {
        ADMIN
        PATIENT
        PHYSICIAN
        VISITOR
      }

      type Subscription {
        address(
          where: AddressSubscriptionWhereInput
        ): AddressSubscriptionPayload
        creditCard(
          where: CreditCardSubscriptionWhereInput
        ): CreditCardSubscriptionPayload
        discount(
          where: DiscountSubscriptionWhereInput
        ): DiscountSubscriptionPayload
        interest(
          where: InterestSubscriptionWhereInput
        ): InterestSubscriptionPayload
        message(
          where: MessageSubscriptionWhereInput
        ): MessageSubscriptionPayload
        order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
        prescription(
          where: PrescriptionSubscriptionWhereInput
        ): PrescriptionSubscriptionPayload
        product(
          where: ProductSubscriptionWhereInput
        ): ProductSubscriptionPayload
        user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
        visit(where: VisitSubscriptionWhereInput): VisitSubscriptionPayload
      }

      type User {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        addresses(
          where: AddressWhereInput
          orderBy: AddressOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Address!]
        creditCards(
          where: CreditCardWhereInput
          orderBy: CreditCardOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [CreditCard!]
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions(
          where: PrescriptionWhereInput
          orderBy: PrescriptionOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Prescription!]
        visits(
          where: VisitWhereInput
          orderBy: VisitOrderByInput
          skip: Int
          after: String
          before: String
          first: Int
          last: Int
        ): [Visit!]
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      type UserConnection {
        pageInfo: PageInfo!
        edges: [UserEdge]!
        aggregate: AggregateUser!
      }

      input UserCreateInput {
        id: ID
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        addresses: AddressCreateManyWithoutUserInput
        creditCards: CreditCardCreateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionCreateManyWithoutUserInput
        visits: VisitCreateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserCreateOneInput {
        create: UserCreateInput
        connect: UserWhereUniqueInput
      }

      input UserCreateOneWithoutAddressesInput {
        create: UserCreateWithoutAddressesInput
        connect: UserWhereUniqueInput
      }

      input UserCreateOneWithoutCreditCardsInput {
        create: UserCreateWithoutCreditCardsInput
        connect: UserWhereUniqueInput
      }

      input UserCreateOneWithoutPrescriptionsInput {
        create: UserCreateWithoutPrescriptionsInput
        connect: UserWhereUniqueInput
      }

      input UserCreateOneWithoutVisitsInput {
        create: UserCreateWithoutVisitsInput
        connect: UserWhereUniqueInput
      }

      input UserCreateWithoutAddressesInput {
        id: ID
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        creditCards: CreditCardCreateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionCreateManyWithoutUserInput
        visits: VisitCreateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserCreateWithoutCreditCardsInput {
        id: ID
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        addresses: AddressCreateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionCreateManyWithoutUserInput
        visits: VisitCreateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserCreateWithoutPrescriptionsInput {
        id: ID
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        addresses: AddressCreateManyWithoutUserInput
        creditCards: CreditCardCreateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        visits: VisitCreateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserCreateWithoutVisitsInput {
        id: ID
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        addresses: AddressCreateManyWithoutUserInput
        creditCards: CreditCardCreateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionCreateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      type UserEdge {
        node: User!
        cursor: String!
      }

      enum UserOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        role_ASC
        role_DESC
        firstName_ASC
        firstName_DESC
        lastName_ASC
        lastName_DESC
        password_ASC
        password_DESC
        email_ASC
        email_DESC
        photoId_ASC
        photoId_DESC
        gender_ASC
        gender_DESC
        birthDate_ASC
        birthDate_DESC
        currVisit_ASC
        currVisit_DESC
        resetToken_ASC
        resetToken_DESC
        resetTokenExpiry_ASC
        resetTokenExpiry_DESC
        tokenVersion_ASC
        tokenVersion_DESC
      }

      type UserPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        role: Role
        firstName: String!
        lastName: String!
        password: String!
        email: String!
        photoId: String
        gender: String
        birthDate: DateTime
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      type UserSubscriptionPayload {
        mutation: MutationType!
        node: User
        updatedFields: [String!]
        previousValues: UserPreviousValues
      }

      input UserSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: UserWhereInput
        AND: [UserSubscriptionWhereInput!]
        OR: [UserSubscriptionWhereInput!]
        NOT: [UserSubscriptionWhereInput!]
      }

      input UserUpdateDataInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        addresses: AddressUpdateManyWithoutUserInput
        creditCards: CreditCardUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionUpdateManyWithoutUserInput
        visits: VisitUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        addresses: AddressUpdateManyWithoutUserInput
        creditCards: CreditCardUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionUpdateManyWithoutUserInput
        visits: VisitUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateManyMutationInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        photoId: String
        gender: String
        birthDate: DateTime
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateOneInput {
        create: UserCreateInput
        update: UserUpdateDataInput
        upsert: UserUpsertNestedInput
        delete: Boolean
        disconnect: Boolean
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneRequiredInput {
        create: UserCreateInput
        update: UserUpdateDataInput
        upsert: UserUpsertNestedInput
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneRequiredWithoutAddressesInput {
        create: UserCreateWithoutAddressesInput
        update: UserUpdateWithoutAddressesDataInput
        upsert: UserUpsertWithoutAddressesInput
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneRequiredWithoutCreditCardsInput {
        create: UserCreateWithoutCreditCardsInput
        update: UserUpdateWithoutCreditCardsDataInput
        upsert: UserUpsertWithoutCreditCardsInput
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneRequiredWithoutPrescriptionsInput {
        create: UserCreateWithoutPrescriptionsInput
        update: UserUpdateWithoutPrescriptionsDataInput
        upsert: UserUpsertWithoutPrescriptionsInput
        connect: UserWhereUniqueInput
      }

      input UserUpdateOneWithoutVisitsInput {
        create: UserCreateWithoutVisitsInput
        update: UserUpdateWithoutVisitsDataInput
        upsert: UserUpsertWithoutVisitsInput
        delete: Boolean
        disconnect: Boolean
        connect: UserWhereUniqueInput
      }

      input UserUpdateWithoutAddressesDataInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        creditCards: CreditCardUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionUpdateManyWithoutUserInput
        visits: VisitUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateWithoutCreditCardsDataInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        addresses: AddressUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionUpdateManyWithoutUserInput
        visits: VisitUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateWithoutPrescriptionsDataInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        addresses: AddressUpdateManyWithoutUserInput
        creditCards: CreditCardUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        visits: VisitUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpdateWithoutVisitsDataInput {
        role: Role
        firstName: String
        lastName: String
        password: String
        email: String
        addresses: AddressUpdateManyWithoutUserInput
        creditCards: CreditCardUpdateManyWithoutUserInput
        photoId: String
        gender: String
        birthDate: DateTime
        prescriptions: PrescriptionUpdateManyWithoutUserInput
        currVisit: Json
        resetToken: String
        resetTokenExpiry: Float
        tokenVersion: Int
      }

      input UserUpsertNestedInput {
        update: UserUpdateDataInput!
        create: UserCreateInput!
      }

      input UserUpsertWithoutAddressesInput {
        update: UserUpdateWithoutAddressesDataInput!
        create: UserCreateWithoutAddressesInput!
      }

      input UserUpsertWithoutCreditCardsInput {
        update: UserUpdateWithoutCreditCardsDataInput!
        create: UserCreateWithoutCreditCardsInput!
      }

      input UserUpsertWithoutPrescriptionsInput {
        update: UserUpdateWithoutPrescriptionsDataInput!
        create: UserCreateWithoutPrescriptionsInput!
      }

      input UserUpsertWithoutVisitsInput {
        update: UserUpdateWithoutVisitsDataInput!
        create: UserCreateWithoutVisitsInput!
      }

      input UserWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        role: Role
        role_not: Role
        role_in: [Role!]
        role_not_in: [Role!]
        firstName: String
        firstName_not: String
        firstName_in: [String!]
        firstName_not_in: [String!]
        firstName_lt: String
        firstName_lte: String
        firstName_gt: String
        firstName_gte: String
        firstName_contains: String
        firstName_not_contains: String
        firstName_starts_with: String
        firstName_not_starts_with: String
        firstName_ends_with: String
        firstName_not_ends_with: String
        lastName: String
        lastName_not: String
        lastName_in: [String!]
        lastName_not_in: [String!]
        lastName_lt: String
        lastName_lte: String
        lastName_gt: String
        lastName_gte: String
        lastName_contains: String
        lastName_not_contains: String
        lastName_starts_with: String
        lastName_not_starts_with: String
        lastName_ends_with: String
        lastName_not_ends_with: String
        password: String
        password_not: String
        password_in: [String!]
        password_not_in: [String!]
        password_lt: String
        password_lte: String
        password_gt: String
        password_gte: String
        password_contains: String
        password_not_contains: String
        password_starts_with: String
        password_not_starts_with: String
        password_ends_with: String
        password_not_ends_with: String
        email: String
        email_not: String
        email_in: [String!]
        email_not_in: [String!]
        email_lt: String
        email_lte: String
        email_gt: String
        email_gte: String
        email_contains: String
        email_not_contains: String
        email_starts_with: String
        email_not_starts_with: String
        email_ends_with: String
        email_not_ends_with: String
        addresses_every: AddressWhereInput
        addresses_some: AddressWhereInput
        addresses_none: AddressWhereInput
        creditCards_every: CreditCardWhereInput
        creditCards_some: CreditCardWhereInput
        creditCards_none: CreditCardWhereInput
        photoId: String
        photoId_not: String
        photoId_in: [String!]
        photoId_not_in: [String!]
        photoId_lt: String
        photoId_lte: String
        photoId_gt: String
        photoId_gte: String
        photoId_contains: String
        photoId_not_contains: String
        photoId_starts_with: String
        photoId_not_starts_with: String
        photoId_ends_with: String
        photoId_not_ends_with: String
        gender: String
        gender_not: String
        gender_in: [String!]
        gender_not_in: [String!]
        gender_lt: String
        gender_lte: String
        gender_gt: String
        gender_gte: String
        gender_contains: String
        gender_not_contains: String
        gender_starts_with: String
        gender_not_starts_with: String
        gender_ends_with: String
        gender_not_ends_with: String
        birthDate: DateTime
        birthDate_not: DateTime
        birthDate_in: [DateTime!]
        birthDate_not_in: [DateTime!]
        birthDate_lt: DateTime
        birthDate_lte: DateTime
        birthDate_gt: DateTime
        birthDate_gte: DateTime
        prescriptions_every: PrescriptionWhereInput
        prescriptions_some: PrescriptionWhereInput
        prescriptions_none: PrescriptionWhereInput
        visits_every: VisitWhereInput
        visits_some: VisitWhereInput
        visits_none: VisitWhereInput
        resetToken: String
        resetToken_not: String
        resetToken_in: [String!]
        resetToken_not_in: [String!]
        resetToken_lt: String
        resetToken_lte: String
        resetToken_gt: String
        resetToken_gte: String
        resetToken_contains: String
        resetToken_not_contains: String
        resetToken_starts_with: String
        resetToken_not_starts_with: String
        resetToken_ends_with: String
        resetToken_not_ends_with: String
        resetTokenExpiry: Float
        resetTokenExpiry_not: Float
        resetTokenExpiry_in: [Float!]
        resetTokenExpiry_not_in: [Float!]
        resetTokenExpiry_lt: Float
        resetTokenExpiry_lte: Float
        resetTokenExpiry_gt: Float
        resetTokenExpiry_gte: Float
        tokenVersion: Int
        tokenVersion_not: Int
        tokenVersion_in: [Int!]
        tokenVersion_not_in: [Int!]
        tokenVersion_lt: Int
        tokenVersion_lte: Int
        tokenVersion_gt: Int
        tokenVersion_gte: Int
        AND: [UserWhereInput!]
        OR: [UserWhereInput!]
        NOT: [UserWhereInput!]
      }

      input UserWhereUniqueInput {
        id: ID
        email: String
      }

      type Visit {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        user: User
        type: PrescriptionType!
        questionnaire: Json!
      }

      type VisitConnection {
        pageInfo: PageInfo!
        edges: [VisitEdge]!
        aggregate: AggregateVisit!
      }

      input VisitCreateInput {
        id: ID
        user: UserCreateOneWithoutVisitsInput
        type: PrescriptionType
        questionnaire: Json!
      }

      input VisitCreateManyWithoutUserInput {
        create: [VisitCreateWithoutUserInput!]
        connect: [VisitWhereUniqueInput!]
      }

      input VisitCreateOneInput {
        create: VisitCreateInput
        connect: VisitWhereUniqueInput
      }

      input VisitCreateWithoutUserInput {
        id: ID
        type: PrescriptionType
        questionnaire: Json!
      }

      type VisitEdge {
        node: Visit!
        cursor: String!
      }

      enum VisitOrderByInput {
        id_ASC
        id_DESC
        createdAt_ASC
        createdAt_DESC
        updatedAt_ASC
        updatedAt_DESC
        type_ASC
        type_DESC
        questionnaire_ASC
        questionnaire_DESC
      }

      type VisitPreviousValues {
        id: ID!
        createdAt: DateTime!
        updatedAt: DateTime!
        type: PrescriptionType!
        questionnaire: Json!
      }

      input VisitScalarWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        type: PrescriptionType
        type_not: PrescriptionType
        type_in: [PrescriptionType!]
        type_not_in: [PrescriptionType!]
        AND: [VisitScalarWhereInput!]
        OR: [VisitScalarWhereInput!]
        NOT: [VisitScalarWhereInput!]
      }

      type VisitSubscriptionPayload {
        mutation: MutationType!
        node: Visit
        updatedFields: [String!]
        previousValues: VisitPreviousValues
      }

      input VisitSubscriptionWhereInput {
        mutation_in: [MutationType!]
        updatedFields_contains: String
        updatedFields_contains_every: [String!]
        updatedFields_contains_some: [String!]
        node: VisitWhereInput
        AND: [VisitSubscriptionWhereInput!]
        OR: [VisitSubscriptionWhereInput!]
        NOT: [VisitSubscriptionWhereInput!]
      }

      input VisitUpdateDataInput {
        user: UserUpdateOneWithoutVisitsInput
        type: PrescriptionType
        questionnaire: Json
      }

      input VisitUpdateInput {
        user: UserUpdateOneWithoutVisitsInput
        type: PrescriptionType
        questionnaire: Json
      }

      input VisitUpdateManyDataInput {
        type: PrescriptionType
        questionnaire: Json
      }

      input VisitUpdateManyMutationInput {
        type: PrescriptionType
        questionnaire: Json
      }

      input VisitUpdateManyWithoutUserInput {
        create: [VisitCreateWithoutUserInput!]
        delete: [VisitWhereUniqueInput!]
        connect: [VisitWhereUniqueInput!]
        set: [VisitWhereUniqueInput!]
        disconnect: [VisitWhereUniqueInput!]
        update: [VisitUpdateWithWhereUniqueWithoutUserInput!]
        upsert: [VisitUpsertWithWhereUniqueWithoutUserInput!]
        deleteMany: [VisitScalarWhereInput!]
        updateMany: [VisitUpdateManyWithWhereNestedInput!]
      }

      input VisitUpdateManyWithWhereNestedInput {
        where: VisitScalarWhereInput!
        data: VisitUpdateManyDataInput!
      }

      input VisitUpdateOneRequiredInput {
        create: VisitCreateInput
        update: VisitUpdateDataInput
        upsert: VisitUpsertNestedInput
        connect: VisitWhereUniqueInput
      }

      input VisitUpdateWithoutUserDataInput {
        type: PrescriptionType
        questionnaire: Json
      }

      input VisitUpdateWithWhereUniqueWithoutUserInput {
        where: VisitWhereUniqueInput!
        data: VisitUpdateWithoutUserDataInput!
      }

      input VisitUpsertNestedInput {
        update: VisitUpdateDataInput!
        create: VisitCreateInput!
      }

      input VisitUpsertWithWhereUniqueWithoutUserInput {
        where: VisitWhereUniqueInput!
        update: VisitUpdateWithoutUserDataInput!
        create: VisitCreateWithoutUserInput!
      }

      input VisitWhereInput {
        id: ID
        id_not: ID
        id_in: [ID!]
        id_not_in: [ID!]
        id_lt: ID
        id_lte: ID
        id_gt: ID
        id_gte: ID
        id_contains: ID
        id_not_contains: ID
        id_starts_with: ID
        id_not_starts_with: ID
        id_ends_with: ID
        id_not_ends_with: ID
        createdAt: DateTime
        createdAt_not: DateTime
        createdAt_in: [DateTime!]
        createdAt_not_in: [DateTime!]
        createdAt_lt: DateTime
        createdAt_lte: DateTime
        createdAt_gt: DateTime
        createdAt_gte: DateTime
        updatedAt: DateTime
        updatedAt_not: DateTime
        updatedAt_in: [DateTime!]
        updatedAt_not_in: [DateTime!]
        updatedAt_lt: DateTime
        updatedAt_lte: DateTime
        updatedAt_gt: DateTime
        updatedAt_gte: DateTime
        user: UserWhereInput
        type: PrescriptionType
        type_not: PrescriptionType
        type_in: [PrescriptionType!]
        type_not_in: [PrescriptionType!]
        AND: [VisitWhereInput!]
        OR: [VisitWhereInput!]
        NOT: [VisitWhereInput!]
      }

      input VisitWhereUniqueInput {
        id: ID
      }
    `,
};
